{
  "version": 3,
  "sources": ["../../three/examples/jsm/libs/fflate.module.js", "../../three/examples/jsm/loaders/EXRLoader.js"],
  "sourcesContent": ["/*!\r\nfflate - fast JavaScript compression/decompression\r\n<https://101arrowz.github.io/fflate>\r\nLicensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE\r\nversion 0.8.2\r\n*/\r\n\r\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\r\n// https://tools.ietf.org/html/rfc1951\r\n// You may also wish to take a look at the guide I made about this program:\r\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\r\n// Some of the following code is similar to that of UZIP.js:\r\n// https://github.com/photopea/UZIP.js\r\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\r\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\r\n// is better for memory in most engines (I *think*).\r\nvar ch2 = {};\r\nvar wk = (function (c, id, msg, transfer, cb) {\r\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\r\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\r\n    ], { type: 'text/javascript' }))));\r\n    w.onmessage = function (e) {\r\n        var d = e.data, ed = d.$e$;\r\n        if (ed) {\r\n            var err = new Error(ed[0]);\r\n            err['code'] = ed[1];\r\n            err.stack = ed[2];\r\n            cb(err, null);\r\n        }\r\n        else\r\n            cb(null, d);\r\n    };\r\n    w.postMessage(msg, transfer);\r\n    return w;\r\n});\r\n\r\n// aliases for shorter compressed code (most minifers don't do this)\r\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\r\n// fixed length extra bits\r\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\r\n// fixed distance extra bits\r\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\r\n// code length index map\r\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\r\n// get base, reverse index map from extra bits\r\nvar freb = function (eb, start) {\r\n    var b = new u16(31);\r\n    for (var i = 0; i < 31; ++i) {\r\n        b[i] = start += 1 << eb[i - 1];\r\n    }\r\n    // numbers here are at max 18 bits\r\n    var r = new i32(b[30]);\r\n    for (var i = 1; i < 30; ++i) {\r\n        for (var j = b[i]; j < b[i + 1]; ++j) {\r\n            r[j] = ((j - b[i]) << 5) | i;\r\n        }\r\n    }\r\n    return { b: b, r: r };\r\n};\r\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\r\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\r\nfl[28] = 258, revfl[258] = 28;\r\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\r\n// map of value to reverse (assuming 16 bits)\r\nvar rev = new u16(32768);\r\nfor (var i = 0; i < 32768; ++i) {\r\n    // reverse table algorithm from SO\r\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\r\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\r\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\r\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\r\n}\r\n// create huffman tree from u8 \"map\": index -> code length for code index\r\n// mb (max bits) must be at most 15\r\n// TODO: optimize/split up?\r\nvar hMap = (function (cd, mb, r) {\r\n    var s = cd.length;\r\n    // index\r\n    var i = 0;\r\n    // u16 \"map\": index -> # of codes with bit length = index\r\n    var l = new u16(mb);\r\n    // length of cd must be 288 (total # of codes)\r\n    for (; i < s; ++i) {\r\n        if (cd[i])\r\n            ++l[cd[i] - 1];\r\n    }\r\n    // u16 \"map\": index -> minimum code for bit length = index\r\n    var le = new u16(mb);\r\n    for (i = 1; i < mb; ++i) {\r\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\r\n    }\r\n    var co;\r\n    if (r) {\r\n        // u16 \"map\": index -> number of actual bits, symbol for code\r\n        co = new u16(1 << mb);\r\n        // bits to remove for reverser\r\n        var rvb = 15 - mb;\r\n        for (i = 0; i < s; ++i) {\r\n            // ignore 0 lengths\r\n            if (cd[i]) {\r\n                // num encoding both symbol and bits read\r\n                var sv = (i << 4) | cd[i];\r\n                // free bits\r\n                var r_1 = mb - cd[i];\r\n                // start value\r\n                var v = le[cd[i] - 1]++ << r_1;\r\n                // m is end value\r\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\r\n                    // every 16 bit value starting with the code yields the same result\r\n                    co[rev[v] >> rvb] = sv;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        co = new u16(s);\r\n        for (i = 0; i < s; ++i) {\r\n            if (cd[i]) {\r\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\r\n            }\r\n        }\r\n    }\r\n    return co;\r\n});\r\n// fixed length tree\r\nvar flt = new u8(288);\r\nfor (var i = 0; i < 144; ++i)\r\n    flt[i] = 8;\r\nfor (var i = 144; i < 256; ++i)\r\n    flt[i] = 9;\r\nfor (var i = 256; i < 280; ++i)\r\n    flt[i] = 7;\r\nfor (var i = 280; i < 288; ++i)\r\n    flt[i] = 8;\r\n// fixed distance tree\r\nvar fdt = new u8(32);\r\nfor (var i = 0; i < 32; ++i)\r\n    fdt[i] = 5;\r\n// fixed length map\r\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\r\n// fixed distance map\r\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\r\n// find max of array\r\nvar max = function (a) {\r\n    var m = a[0];\r\n    for (var i = 1; i < a.length; ++i) {\r\n        if (a[i] > m)\r\n            m = a[i];\r\n    }\r\n    return m;\r\n};\r\n// read d, starting at bit p and mask with m\r\nvar bits = function (d, p, m) {\r\n    var o = (p / 8) | 0;\r\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\r\n};\r\n// read d, starting at bit p continuing for at least 16 bits\r\nvar bits16 = function (d, p) {\r\n    var o = (p / 8) | 0;\r\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\r\n};\r\n// get end of byte\r\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\r\n// typed array slice - allows garbage collector to free original reference,\r\n// while being more compatible than .slice\r\nvar slc = function (v, s, e) {\r\n    if (s == null || s < 0)\r\n        s = 0;\r\n    if (e == null || e > v.length)\r\n        e = v.length;\r\n    // can't use .constructor in case user-supplied\r\n    return new u8(v.subarray(s, e));\r\n};\r\n/**\r\n * Codes for errors generated within this library\r\n */\r\nexport var FlateErrorCode = {\r\n    UnexpectedEOF: 0,\r\n    InvalidBlockType: 1,\r\n    InvalidLengthLiteral: 2,\r\n    InvalidDistance: 3,\r\n    StreamFinished: 4,\r\n    NoStreamHandler: 5,\r\n    InvalidHeader: 6,\r\n    NoCallback: 7,\r\n    InvalidUTF8: 8,\r\n    ExtraFieldTooLong: 9,\r\n    InvalidDate: 10,\r\n    FilenameTooLong: 11,\r\n    StreamFinishing: 12,\r\n    InvalidZipData: 13,\r\n    UnknownCompressionMethod: 14\r\n};\r\n// error codes\r\nvar ec = [\r\n    'unexpected EOF',\r\n    'invalid block type',\r\n    'invalid length/literal',\r\n    'invalid distance',\r\n    'stream finished',\r\n    'no stream handler',\r\n    ,\r\n    'no callback',\r\n    'invalid UTF-8 data',\r\n    'extra field too long',\r\n    'date not in range 1980-2099',\r\n    'filename too long',\r\n    'stream finishing',\r\n    'invalid zip data'\r\n    // determined by unknown compression method\r\n];\r\n;\r\nvar err = function (ind, msg, nt) {\r\n    var e = new Error(msg || ec[ind]);\r\n    e.code = ind;\r\n    if (Error.captureStackTrace)\r\n        Error.captureStackTrace(e, err);\r\n    if (!nt)\r\n        throw e;\r\n    return e;\r\n};\r\n// expands raw DEFLATE data\r\nvar inflt = function (dat, st, buf, dict) {\r\n    // source length       dict length\r\n    var sl = dat.length, dl = dict ? dict.length : 0;\r\n    if (!sl || st.f && !st.l)\r\n        return buf || new u8(0);\r\n    var noBuf = !buf;\r\n    // have to estimate size\r\n    var resize = noBuf || st.i != 2;\r\n    // no state\r\n    var noSt = st.i;\r\n    // Assumes roughly 33% compression ratio average\r\n    if (noBuf)\r\n        buf = new u8(sl * 3);\r\n    // ensure buffer can fit at least l elements\r\n    var cbuf = function (l) {\r\n        var bl = buf.length;\r\n        // need to increase size to fit\r\n        if (l > bl) {\r\n            // Double or set to necessary, whichever is greater\r\n            var nbuf = new u8(Math.max(bl * 2, l));\r\n            nbuf.set(buf);\r\n            buf = nbuf;\r\n        }\r\n    };\r\n    //  last chunk         bitpos           bytes\r\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\r\n    // total bits\r\n    var tbts = sl * 8;\r\n    do {\r\n        if (!lm) {\r\n            // BFINAL - this is only 1 when last chunk is next\r\n            final = bits(dat, pos, 1);\r\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\r\n            var type = bits(dat, pos + 1, 3);\r\n            pos += 3;\r\n            if (!type) {\r\n                // go to end of byte boundary\r\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\r\n                if (t > sl) {\r\n                    if (noSt)\r\n                        err(0);\r\n                    break;\r\n                }\r\n                // ensure size\r\n                if (resize)\r\n                    cbuf(bt + l);\r\n                // Copy over uncompressed data\r\n                buf.set(dat.subarray(s, t), bt);\r\n                // Get new bitpos, update byte count\r\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\r\n                continue;\r\n            }\r\n            else if (type == 1)\r\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\r\n            else if (type == 2) {\r\n                //  literal                            lengths\r\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\r\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\r\n                pos += 14;\r\n                // length+distance tree\r\n                var ldt = new u8(tl);\r\n                // code length tree\r\n                var clt = new u8(19);\r\n                for (var i = 0; i < hcLen; ++i) {\r\n                    // use index map to get real code\r\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\r\n                }\r\n                pos += hcLen * 3;\r\n                // code lengths bits\r\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\r\n                // code lengths map\r\n                var clm = hMap(clt, clb, 1);\r\n                for (var i = 0; i < tl;) {\r\n                    var r = clm[bits(dat, pos, clbmsk)];\r\n                    // bits read\r\n                    pos += r & 15;\r\n                    // symbol\r\n                    var s = r >> 4;\r\n                    // code length to copy\r\n                    if (s < 16) {\r\n                        ldt[i++] = s;\r\n                    }\r\n                    else {\r\n                        //  copy   count\r\n                        var c = 0, n = 0;\r\n                        if (s == 16)\r\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\r\n                        else if (s == 17)\r\n                            n = 3 + bits(dat, pos, 7), pos += 3;\r\n                        else if (s == 18)\r\n                            n = 11 + bits(dat, pos, 127), pos += 7;\r\n                        while (n--)\r\n                            ldt[i++] = c;\r\n                    }\r\n                }\r\n                //    length tree                 distance tree\r\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\r\n                // max length bits\r\n                lbt = max(lt);\r\n                // max dist bits\r\n                dbt = max(dt);\r\n                lm = hMap(lt, lbt, 1);\r\n                dm = hMap(dt, dbt, 1);\r\n            }\r\n            else\r\n                err(1);\r\n            if (pos > tbts) {\r\n                if (noSt)\r\n                    err(0);\r\n                break;\r\n            }\r\n        }\r\n        // Make sure the buffer can hold this + the largest possible addition\r\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\r\n        if (resize)\r\n            cbuf(bt + 131072);\r\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\r\n        var lpos = pos;\r\n        for (;; lpos = pos) {\r\n            // bits read, code\r\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\r\n            pos += c & 15;\r\n            if (pos > tbts) {\r\n                if (noSt)\r\n                    err(0);\r\n                break;\r\n            }\r\n            if (!c)\r\n                err(2);\r\n            if (sym < 256)\r\n                buf[bt++] = sym;\r\n            else if (sym == 256) {\r\n                lpos = pos, lm = null;\r\n                break;\r\n            }\r\n            else {\r\n                var add = sym - 254;\r\n                // no extra bits needed if less\r\n                if (sym > 264) {\r\n                    // index\r\n                    var i = sym - 257, b = fleb[i];\r\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\r\n                    pos += b;\r\n                }\r\n                // dist\r\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\r\n                if (!d)\r\n                    err(3);\r\n                pos += d & 15;\r\n                var dt = fd[dsym];\r\n                if (dsym > 3) {\r\n                    var b = fdeb[dsym];\r\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\r\n                }\r\n                if (pos > tbts) {\r\n                    if (noSt)\r\n                        err(0);\r\n                    break;\r\n                }\r\n                if (resize)\r\n                    cbuf(bt + 131072);\r\n                var end = bt + add;\r\n                if (bt < dt) {\r\n                    var shift = dl - dt, dend = Math.min(dt, end);\r\n                    if (shift + bt < 0)\r\n                        err(3);\r\n                    for (; bt < dend; ++bt)\r\n                        buf[bt] = dict[shift + bt];\r\n                }\r\n                for (; bt < end; ++bt)\r\n                    buf[bt] = buf[bt - dt];\r\n            }\r\n        }\r\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\r\n        if (lm)\r\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\r\n    } while (!final);\r\n    // don't reallocate for streams or user buffers\r\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\r\n};\r\n// starting at p, write the minimum number of bits that can hold v to d\r\nvar wbits = function (d, p, v) {\r\n    v <<= p & 7;\r\n    var o = (p / 8) | 0;\r\n    d[o] |= v;\r\n    d[o + 1] |= v >> 8;\r\n};\r\n// starting at p, write the minimum number of bits (>8) that can hold v to d\r\nvar wbits16 = function (d, p, v) {\r\n    v <<= p & 7;\r\n    var o = (p / 8) | 0;\r\n    d[o] |= v;\r\n    d[o + 1] |= v >> 8;\r\n    d[o + 2] |= v >> 16;\r\n};\r\n// creates code lengths from a frequency table\r\nvar hTree = function (d, mb) {\r\n    // Need extra info to make a tree\r\n    var t = [];\r\n    for (var i = 0; i < d.length; ++i) {\r\n        if (d[i])\r\n            t.push({ s: i, f: d[i] });\r\n    }\r\n    var s = t.length;\r\n    var t2 = t.slice();\r\n    if (!s)\r\n        return { t: et, l: 0 };\r\n    if (s == 1) {\r\n        var v = new u8(t[0].s + 1);\r\n        v[t[0].s] = 1;\r\n        return { t: v, l: 1 };\r\n    }\r\n    t.sort(function (a, b) { return a.f - b.f; });\r\n    // after i2 reaches last ind, will be stopped\r\n    // freq must be greater than largest possible number of symbols\r\n    t.push({ s: -1, f: 25001 });\r\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\r\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\r\n    // efficient algorithm from UZIP.js\r\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\r\n    // symbols that combined have high freq, will start processing i2 (high-freq,\r\n    // non-composite) symbols instead\r\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\r\n    while (i1 != s - 1) {\r\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\r\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\r\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\r\n    }\r\n    var maxSym = t2[0].s;\r\n    for (var i = 1; i < s; ++i) {\r\n        if (t2[i].s > maxSym)\r\n            maxSym = t2[i].s;\r\n    }\r\n    // code lengths\r\n    var tr = new u16(maxSym + 1);\r\n    // max bits in tree\r\n    var mbt = ln(t[i1 - 1], tr, 0);\r\n    if (mbt > mb) {\r\n        // more algorithms from UZIP.js\r\n        // TODO: find out how this code works (debt)\r\n        //  ind    debt\r\n        var i = 0, dt = 0;\r\n        //    left            cost\r\n        var lft = mbt - mb, cst = 1 << lft;\r\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\r\n        for (; i < s; ++i) {\r\n            var i2_1 = t2[i].s;\r\n            if (tr[i2_1] > mb) {\r\n                dt += cst - (1 << (mbt - tr[i2_1]));\r\n                tr[i2_1] = mb;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        dt >>= lft;\r\n        while (dt > 0) {\r\n            var i2_2 = t2[i].s;\r\n            if (tr[i2_2] < mb)\r\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\r\n            else\r\n                ++i;\r\n        }\r\n        for (; i >= 0 && dt; --i) {\r\n            var i2_3 = t2[i].s;\r\n            if (tr[i2_3] == mb) {\r\n                --tr[i2_3];\r\n                ++dt;\r\n            }\r\n        }\r\n        mbt = mb;\r\n    }\r\n    return { t: new u8(tr), l: mbt };\r\n};\r\n// get the max length and assign length codes\r\nvar ln = function (n, l, d) {\r\n    return n.s == -1\r\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\r\n        : (l[n.s] = d);\r\n};\r\n// length codes generation\r\nvar lc = function (c) {\r\n    var s = c.length;\r\n    // Note that the semicolon was intentional\r\n    while (s && !c[--s])\r\n        ;\r\n    var cl = new u16(++s);\r\n    //  ind      num         streak\r\n    var cli = 0, cln = c[0], cls = 1;\r\n    var w = function (v) { cl[cli++] = v; };\r\n    for (var i = 1; i <= s; ++i) {\r\n        if (c[i] == cln && i != s)\r\n            ++cls;\r\n        else {\r\n            if (!cln && cls > 2) {\r\n                for (; cls > 138; cls -= 138)\r\n                    w(32754);\r\n                if (cls > 2) {\r\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\r\n                    cls = 0;\r\n                }\r\n            }\r\n            else if (cls > 3) {\r\n                w(cln), --cls;\r\n                for (; cls > 6; cls -= 6)\r\n                    w(8304);\r\n                if (cls > 2)\r\n                    w(((cls - 3) << 5) | 8208), cls = 0;\r\n            }\r\n            while (cls--)\r\n                w(cln);\r\n            cls = 1;\r\n            cln = c[i];\r\n        }\r\n    }\r\n    return { c: cl.subarray(0, cli), n: s };\r\n};\r\n// calculate the length of output from tree, code lengths\r\nvar clen = function (cf, cl) {\r\n    var l = 0;\r\n    for (var i = 0; i < cl.length; ++i)\r\n        l += cf[i] * cl[i];\r\n    return l;\r\n};\r\n// writes a fixed block\r\n// returns the new bit pos\r\nvar wfblk = function (out, pos, dat) {\r\n    // no need to write 00 as type: TypedArray defaults to 0\r\n    var s = dat.length;\r\n    var o = shft(pos + 2);\r\n    out[o] = s & 255;\r\n    out[o + 1] = s >> 8;\r\n    out[o + 2] = out[o] ^ 255;\r\n    out[o + 3] = out[o + 1] ^ 255;\r\n    for (var i = 0; i < s; ++i)\r\n        out[o + i + 4] = dat[i];\r\n    return (o + 4 + s) * 8;\r\n};\r\n// writes a block\r\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\r\n    wbits(out, p++, final);\r\n    ++lf[256];\r\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\r\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\r\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\r\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\r\n    var lcfreq = new u16(19);\r\n    for (var i = 0; i < lclt.length; ++i)\r\n        ++lcfreq[lclt[i] & 31];\r\n    for (var i = 0; i < lcdt.length; ++i)\r\n        ++lcfreq[lcdt[i] & 31];\r\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\r\n    var nlcc = 19;\r\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\r\n        ;\r\n    var flen = (bl + 5) << 3;\r\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\r\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\r\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\r\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\r\n    var lm, ll, dm, dl;\r\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\r\n    if (dtlen < ftlen) {\r\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\r\n        var llm = hMap(lct, mlcb, 0);\r\n        wbits(out, p, nlc - 257);\r\n        wbits(out, p + 5, ndc - 1);\r\n        wbits(out, p + 10, nlcc - 4);\r\n        p += 14;\r\n        for (var i = 0; i < nlcc; ++i)\r\n            wbits(out, p + 3 * i, lct[clim[i]]);\r\n        p += 3 * nlcc;\r\n        var lcts = [lclt, lcdt];\r\n        for (var it = 0; it < 2; ++it) {\r\n            var clct = lcts[it];\r\n            for (var i = 0; i < clct.length; ++i) {\r\n                var len = clct[i] & 31;\r\n                wbits(out, p, llm[len]), p += lct[len];\r\n                if (len > 15)\r\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\r\n    }\r\n    for (var i = 0; i < li; ++i) {\r\n        var sym = syms[i];\r\n        if (sym > 255) {\r\n            var len = (sym >> 18) & 31;\r\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\r\n            if (len > 7)\r\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\r\n            var dst = sym & 31;\r\n            wbits16(out, p, dm[dst]), p += dl[dst];\r\n            if (dst > 3)\r\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\r\n        }\r\n        else {\r\n            wbits16(out, p, lm[sym]), p += ll[sym];\r\n        }\r\n    }\r\n    wbits16(out, p, lm[256]);\r\n    return p + ll[256];\r\n};\r\n// deflate options (nice << 13) | chain\r\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\r\n// empty\r\nvar et = /*#__PURE__*/ new u8(0);\r\n// compresses data into a raw DEFLATE buffer\r\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\r\n    var s = st.z || dat.length;\r\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\r\n    // writing to this writes to the output buffer\r\n    var w = o.subarray(pre, o.length - post);\r\n    var lst = st.l;\r\n    var pos = (st.r || 0) & 7;\r\n    if (lvl) {\r\n        if (pos)\r\n            w[0] = st.r >> 3;\r\n        var opt = deo[lvl - 1];\r\n        var n = opt >> 13, c = opt & 8191;\r\n        var msk_1 = (1 << plvl) - 1;\r\n        //    prev 2-byte val map    curr 2-byte val map\r\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\r\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\r\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\r\n        // 24576 is an arbitrary number of maximum symbols per block\r\n        // 424 buffer for last block\r\n        var syms = new i32(25000);\r\n        // length/literal freq   distance freq\r\n        var lf = new u16(288), df = new u16(32);\r\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\r\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\r\n        for (; i + 2 < s; ++i) {\r\n            // hash value\r\n            var hv = hsh(i);\r\n            // index mod 32768    previous index mod\r\n            var imod = i & 32767, pimod = head[hv];\r\n            prev[imod] = pimod;\r\n            head[hv] = imod;\r\n            // We always should modify head and prev, but only add symbols if\r\n            // this data is not yet processed (\"wait\" for wait index)\r\n            if (wi <= i) {\r\n                // bytes remaining\r\n                var rem = s - i;\r\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\r\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\r\n                    li = lc_1 = eb = 0, bs = i;\r\n                    for (var j = 0; j < 286; ++j)\r\n                        lf[j] = 0;\r\n                    for (var j = 0; j < 30; ++j)\r\n                        df[j] = 0;\r\n                }\r\n                //  len    dist   chain\r\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\r\n                if (rem > 2 && hv == hsh(i - dif)) {\r\n                    var maxn = Math.min(n, rem) - 1;\r\n                    var maxd = Math.min(32767, i);\r\n                    // max possible length\r\n                    // not capped at dif because decompressors implement \"rolling\" index population\r\n                    var ml = Math.min(258, rem);\r\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\r\n                        if (dat[i + l] == dat[i + l - dif]) {\r\n                            var nl = 0;\r\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\r\n                                ;\r\n                            if (nl > l) {\r\n                                l = nl, d = dif;\r\n                                // break out early when we reach \"nice\" (we are satisfied enough)\r\n                                if (nl > maxn)\r\n                                    break;\r\n                                // now, find the rarest 2-byte sequence within this\r\n                                // length of literals and search for that instead.\r\n                                // Much faster than just using the start\r\n                                var mmd = Math.min(dif, nl - 2);\r\n                                var md = 0;\r\n                                for (var j = 0; j < mmd; ++j) {\r\n                                    var ti = i - dif + j & 32767;\r\n                                    var pti = prev[ti];\r\n                                    var cd = ti - pti & 32767;\r\n                                    if (cd > md)\r\n                                        md = cd, pimod = ti;\r\n                                }\r\n                            }\r\n                        }\r\n                        // check the previous match\r\n                        imod = pimod, pimod = prev[imod];\r\n                        dif += imod - pimod & 32767;\r\n                    }\r\n                }\r\n                // d will be nonzero only when a match was found\r\n                if (d) {\r\n                    // store both dist and len data in one int32\r\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\r\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\r\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\r\n                    eb += fleb[lin] + fdeb[din];\r\n                    ++lf[257 + lin];\r\n                    ++df[din];\r\n                    wi = i + l;\r\n                    ++lc_1;\r\n                }\r\n                else {\r\n                    syms[li++] = dat[i];\r\n                    ++lf[dat[i]];\r\n                }\r\n            }\r\n        }\r\n        for (i = Math.max(i, wi); i < s; ++i) {\r\n            syms[li++] = dat[i];\r\n            ++lf[dat[i]];\r\n        }\r\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\r\n        if (!lst) {\r\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\r\n            // shft(pos) now 1 less if pos & 7 != 0\r\n            pos -= 7;\r\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\r\n        }\r\n    }\r\n    else {\r\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\r\n            // end\r\n            var e = i + 65535;\r\n            if (e >= s) {\r\n                // write final block\r\n                w[(pos / 8) | 0] = lst;\r\n                e = s;\r\n            }\r\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\r\n        }\r\n        st.i = s;\r\n    }\r\n    return slc(o, 0, pre + shft(pos) + post);\r\n};\r\n// CRC32 table\r\nvar crct = /*#__PURE__*/ (function () {\r\n    var t = new Int32Array(256);\r\n    for (var i = 0; i < 256; ++i) {\r\n        var c = i, k = 9;\r\n        while (--k)\r\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\r\n        t[i] = c;\r\n    }\r\n    return t;\r\n})();\r\n// CRC32\r\nvar crc = function () {\r\n    var c = -1;\r\n    return {\r\n        p: function (d) {\r\n            // closures have awful performance\r\n            var cr = c;\r\n            for (var i = 0; i < d.length; ++i)\r\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\r\n            c = cr;\r\n        },\r\n        d: function () { return ~c; }\r\n    };\r\n};\r\n// Adler32\r\nvar adler = function () {\r\n    var a = 1, b = 0;\r\n    return {\r\n        p: function (d) {\r\n            // closures have awful performance\r\n            var n = a, m = b;\r\n            var l = d.length | 0;\r\n            for (var i = 0; i != l;) {\r\n                var e = Math.min(i + 2655, l);\r\n                for (; i < e; ++i)\r\n                    m += n += d[i];\r\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\r\n            }\r\n            a = n, b = m;\r\n        },\r\n        d: function () {\r\n            a %= 65521, b %= 65521;\r\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\r\n        }\r\n    };\r\n};\r\n;\r\n// deflate with opts\r\nvar dopt = function (dat, opt, pre, post, st) {\r\n    if (!st) {\r\n        st = { l: 1 };\r\n        if (opt.dictionary) {\r\n            var dict = opt.dictionary.subarray(-32768);\r\n            var newDat = new u8(dict.length + dat.length);\r\n            newDat.set(dict);\r\n            newDat.set(dat, dict.length);\r\n            dat = newDat;\r\n            st.w = dict.length;\r\n        }\r\n    }\r\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\r\n};\r\n// Walmart object spread\r\nvar mrg = function (a, b) {\r\n    var o = {};\r\n    for (var k in a)\r\n        o[k] = a[k];\r\n    for (var k in b)\r\n        o[k] = b[k];\r\n    return o;\r\n};\r\n// worker clone\r\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\r\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\r\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\r\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\r\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\r\n// This took me three weeks to figure out how to do.\r\nvar wcln = function (fn, fnStr, td) {\r\n    var dt = fn();\r\n    var st = fn.toString();\r\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\r\n    for (var i = 0; i < dt.length; ++i) {\r\n        var v = dt[i], k = ks[i];\r\n        if (typeof v == 'function') {\r\n            fnStr += ';' + k + '=';\r\n            var st_1 = v.toString();\r\n            if (v.prototype) {\r\n                // for global objects\r\n                if (st_1.indexOf('[native code]') != -1) {\r\n                    var spInd = st_1.indexOf(' ', 8) + 1;\r\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\r\n                }\r\n                else {\r\n                    fnStr += st_1;\r\n                    for (var t in v.prototype)\r\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\r\n                }\r\n            }\r\n            else\r\n                fnStr += st_1;\r\n        }\r\n        else\r\n            td[k] = v;\r\n    }\r\n    return fnStr;\r\n};\r\nvar ch = [];\r\n// clone bufs\r\nvar cbfs = function (v) {\r\n    var tl = [];\r\n    for (var k in v) {\r\n        if (v[k].buffer) {\r\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\r\n        }\r\n    }\r\n    return tl;\r\n};\r\n// use a worker to execute code\r\nvar wrkr = function (fns, init, id, cb) {\r\n    if (!ch[id]) {\r\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\r\n        for (var i = 0; i < m; ++i)\r\n            fnStr = wcln(fns[i], fnStr, td_1);\r\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\r\n    }\r\n    var td = mrg({}, ch[id].e);\r\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\r\n};\r\n// base async inflate fn\r\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\r\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\r\n// gzip extra\r\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\r\n// gunzip extra\r\nvar guze = function () { return [gzs, gzl]; };\r\n// zlib extra\r\nvar zle = function () { return [zlh, wbytes, adler]; };\r\n// unzlib extra\r\nvar zule = function () { return [zls]; };\r\n// post buf\r\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\r\n// get opts\r\nvar gopt = function (o) { return o && {\r\n    out: o.size && new u8(o.size),\r\n    dictionary: o.dictionary\r\n}; };\r\n// async helper\r\nvar cbify = function (dat, opts, fns, init, id, cb) {\r\n    var w = wrkr(fns, init, id, function (err, dat) {\r\n        w.terminate();\r\n        cb(err, dat);\r\n    });\r\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\r\n    return function () { w.terminate(); };\r\n};\r\n// auto stream\r\nvar astrm = function (strm) {\r\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\r\n    return function (ev) {\r\n        if (ev.data.length) {\r\n            strm.push(ev.data[0], ev.data[1]);\r\n            postMessage([ev.data[0].length]);\r\n        }\r\n        else\r\n            strm.flush();\r\n    };\r\n};\r\n// async stream attach\r\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\r\n    var t;\r\n    var w = wrkr(fns, init, id, function (err, dat) {\r\n        if (err)\r\n            w.terminate(), strm.ondata.call(strm, err);\r\n        else if (!Array.isArray(dat))\r\n            ext(dat);\r\n        else if (dat.length == 1) {\r\n            strm.queuedSize -= dat[0];\r\n            if (strm.ondrain)\r\n                strm.ondrain(dat[0]);\r\n        }\r\n        else {\r\n            if (dat[1])\r\n                w.terminate();\r\n            strm.ondata.call(strm, err, dat[0], dat[1]);\r\n        }\r\n    });\r\n    w.postMessage(opts);\r\n    strm.queuedSize = 0;\r\n    strm.push = function (d, f) {\r\n        if (!strm.ondata)\r\n            err(5);\r\n        if (t)\r\n            strm.ondata(err(4, 0, 1), null, !!f);\r\n        strm.queuedSize += d.length;\r\n        w.postMessage([d, t = f], [d.buffer]);\r\n    };\r\n    strm.terminate = function () { w.terminate(); };\r\n    if (flush) {\r\n        strm.flush = function () { w.postMessage([]); };\r\n    }\r\n};\r\n// read 2 bytes\r\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\r\n// read 4 bytes\r\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\r\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\r\n// write bytes\r\nvar wbytes = function (d, b, v) {\r\n    for (; v; ++b)\r\n        d[b] = v, v >>>= 8;\r\n};\r\n// gzip header\r\nvar gzh = function (c, o) {\r\n    var fn = o.filename;\r\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\r\n    if (o.mtime != 0)\r\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\r\n    if (fn) {\r\n        c[3] = 8;\r\n        for (var i = 0; i <= fn.length; ++i)\r\n            c[i + 10] = fn.charCodeAt(i);\r\n    }\r\n};\r\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\r\n// gzip start\r\nvar gzs = function (d) {\r\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\r\n        err(6, 'invalid gzip data');\r\n    var flg = d[3];\r\n    var st = 10;\r\n    if (flg & 4)\r\n        st += (d[10] | d[11] << 8) + 2;\r\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\r\n        ;\r\n    return st + (flg & 2);\r\n};\r\n// gzip length\r\nvar gzl = function (d) {\r\n    var l = d.length;\r\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\r\n};\r\n// gzip header length\r\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\r\n// zlib header\r\nvar zlh = function (c, o) {\r\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\r\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\r\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\r\n    if (o.dictionary) {\r\n        var h = adler();\r\n        h.p(o.dictionary);\r\n        wbytes(c, 2, h.d());\r\n    }\r\n};\r\n// zlib start\r\nvar zls = function (d, dict) {\r\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\r\n        err(6, 'invalid zlib data');\r\n    if ((d[1] >> 5 & 1) == +!dict)\r\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\r\n    return (d[1] >> 3 & 4) + 2;\r\n};\r\nfunction StrmOpt(opts, cb) {\r\n    if (typeof opts == 'function')\r\n        cb = opts, opts = {};\r\n    this.ondata = cb;\r\n    return opts;\r\n}\r\n/**\r\n * Streaming DEFLATE compression\r\n */\r\nvar Deflate = /*#__PURE__*/ (function () {\r\n    function Deflate(opts, cb) {\r\n        if (typeof opts == 'function')\r\n            cb = opts, opts = {};\r\n        this.ondata = cb;\r\n        this.o = opts || {};\r\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\r\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\r\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\r\n        this.b = new u8(98304);\r\n        if (this.o.dictionary) {\r\n            var dict = this.o.dictionary.subarray(-32768);\r\n            this.b.set(dict, 32768 - dict.length);\r\n            this.s.i = 32768 - dict.length;\r\n        }\r\n    }\r\n    Deflate.prototype.p = function (c, f) {\r\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\r\n    };\r\n    /**\r\n     * Pushes a chunk to be deflated\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Deflate.prototype.push = function (chunk, final) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        if (this.s.l)\r\n            err(4);\r\n        var endLen = chunk.length + this.s.z;\r\n        if (endLen > this.b.length) {\r\n            if (endLen > 2 * this.b.length - 32768) {\r\n                var newBuf = new u8(endLen & -32768);\r\n                newBuf.set(this.b.subarray(0, this.s.z));\r\n                this.b = newBuf;\r\n            }\r\n            var split = this.b.length - this.s.z;\r\n            this.b.set(chunk.subarray(0, split), this.s.z);\r\n            this.s.z = this.b.length;\r\n            this.p(this.b, false);\r\n            this.b.set(this.b.subarray(-32768));\r\n            this.b.set(chunk.subarray(split), 32768);\r\n            this.s.z = chunk.length - split + 32768;\r\n            this.s.i = 32766, this.s.w = 32768;\r\n        }\r\n        else {\r\n            this.b.set(chunk, this.s.z);\r\n            this.s.z += chunk.length;\r\n        }\r\n        this.s.l = final & 1;\r\n        if (this.s.z > this.s.w + 8191 || final) {\r\n            this.p(this.b, final || false);\r\n            this.s.w = this.s.i, this.s.i -= 2;\r\n        }\r\n    };\r\n    /**\r\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\r\n     * deflated output for small inputs.\r\n     */\r\n    Deflate.prototype.flush = function () {\r\n        if (!this.ondata)\r\n            err(5);\r\n        if (this.s.l)\r\n            err(4);\r\n        this.p(this.b, false);\r\n        this.s.w = this.s.i, this.s.i -= 2;\r\n    };\r\n    return Deflate;\r\n}());\r\nexport { Deflate };\r\n/**\r\n * Asynchronous streaming DEFLATE compression\r\n */\r\nvar AsyncDeflate = /*#__PURE__*/ (function () {\r\n    function AsyncDeflate(opts, cb) {\r\n        astrmify([\r\n            bDflt,\r\n            function () { return [astrm, Deflate]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Deflate(ev.data);\r\n            onmessage = astrm(strm);\r\n        }, 6, 1);\r\n    }\r\n    return AsyncDeflate;\r\n}());\r\nexport { AsyncDeflate };\r\nexport function deflate(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bDflt,\r\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\r\n}\r\n/**\r\n * Compresses data with DEFLATE without any wrapper\r\n * @param data The data to compress\r\n * @param opts The compression options\r\n * @returns The deflated version of the data\r\n */\r\nexport function deflateSync(data, opts) {\r\n    return dopt(data, opts || {}, 0, 0);\r\n}\r\n/**\r\n * Streaming DEFLATE decompression\r\n */\r\nvar Inflate = /*#__PURE__*/ (function () {\r\n    function Inflate(opts, cb) {\r\n        // no StrmOpt here to avoid adding to workerizer\r\n        if (typeof opts == 'function')\r\n            cb = opts, opts = {};\r\n        this.ondata = cb;\r\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\r\n        this.s = { i: 0, b: dict ? dict.length : 0 };\r\n        this.o = new u8(32768);\r\n        this.p = new u8(0);\r\n        if (dict)\r\n            this.o.set(dict);\r\n    }\r\n    Inflate.prototype.e = function (c) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        if (this.d)\r\n            err(4);\r\n        if (!this.p.length)\r\n            this.p = c;\r\n        else if (c.length) {\r\n            var n = new u8(this.p.length + c.length);\r\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\r\n        }\r\n    };\r\n    Inflate.prototype.c = function (final) {\r\n        this.s.i = +(this.d = final || false);\r\n        var bts = this.s.b;\r\n        var dt = inflt(this.p, this.s, this.o);\r\n        this.ondata(slc(dt, bts, this.s.b), this.d);\r\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\r\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\r\n    };\r\n    /**\r\n     * Pushes a chunk to be inflated\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the final chunk\r\n     */\r\n    Inflate.prototype.push = function (chunk, final) {\r\n        this.e(chunk), this.c(final);\r\n    };\r\n    return Inflate;\r\n}());\r\nexport { Inflate };\r\n/**\r\n * Asynchronous streaming DEFLATE decompression\r\n */\r\nvar AsyncInflate = /*#__PURE__*/ (function () {\r\n    function AsyncInflate(opts, cb) {\r\n        astrmify([\r\n            bInflt,\r\n            function () { return [astrm, Inflate]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Inflate(ev.data);\r\n            onmessage = astrm(strm);\r\n        }, 7, 0);\r\n    }\r\n    return AsyncInflate;\r\n}());\r\nexport { AsyncInflate };\r\nexport function inflate(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bInflt\r\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\r\n}\r\n/**\r\n * Expands DEFLATE data with no wrapper\r\n * @param data The data to decompress\r\n * @param opts The decompression options\r\n * @returns The decompressed version of the data\r\n */\r\nexport function inflateSync(data, opts) {\r\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\r\n}\r\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\r\n/**\r\n * Streaming GZIP compression\r\n */\r\nvar Gzip = /*#__PURE__*/ (function () {\r\n    function Gzip(opts, cb) {\r\n        this.c = crc();\r\n        this.l = 0;\r\n        this.v = 1;\r\n        Deflate.call(this, opts, cb);\r\n    }\r\n    /**\r\n     * Pushes a chunk to be GZIPped\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Gzip.prototype.push = function (chunk, final) {\r\n        this.c.p(chunk);\r\n        this.l += chunk.length;\r\n        Deflate.prototype.push.call(this, chunk, final);\r\n    };\r\n    Gzip.prototype.p = function (c, f) {\r\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\r\n        if (this.v)\r\n            gzh(raw, this.o), this.v = 0;\r\n        if (f)\r\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\r\n        this.ondata(raw, f);\r\n    };\r\n    /**\r\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\r\n     * GZIPped output for small inputs.\r\n     */\r\n    Gzip.prototype.flush = function () {\r\n        Deflate.prototype.flush.call(this);\r\n    };\r\n    return Gzip;\r\n}());\r\nexport { Gzip };\r\n/**\r\n * Asynchronous streaming GZIP compression\r\n */\r\nvar AsyncGzip = /*#__PURE__*/ (function () {\r\n    function AsyncGzip(opts, cb) {\r\n        astrmify([\r\n            bDflt,\r\n            gze,\r\n            function () { return [astrm, Deflate, Gzip]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Gzip(ev.data);\r\n            onmessage = astrm(strm);\r\n        }, 8, 1);\r\n    }\r\n    return AsyncGzip;\r\n}());\r\nexport { AsyncGzip };\r\nexport function gzip(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bDflt,\r\n        gze,\r\n        function () { return [gzipSync]; }\r\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\r\n}\r\n/**\r\n * Compresses data with GZIP\r\n * @param data The data to compress\r\n * @param opts The compression options\r\n * @returns The gzipped version of the data\r\n */\r\nexport function gzipSync(data, opts) {\r\n    if (!opts)\r\n        opts = {};\r\n    var c = crc(), l = data.length;\r\n    c.p(data);\r\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\r\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\r\n}\r\n/**\r\n * Streaming single or multi-member GZIP decompression\r\n */\r\nvar Gunzip = /*#__PURE__*/ (function () {\r\n    function Gunzip(opts, cb) {\r\n        this.v = 1;\r\n        this.r = 0;\r\n        Inflate.call(this, opts, cb);\r\n    }\r\n    /**\r\n     * Pushes a chunk to be GUNZIPped\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Gunzip.prototype.push = function (chunk, final) {\r\n        Inflate.prototype.e.call(this, chunk);\r\n        this.r += chunk.length;\r\n        if (this.v) {\r\n            var p = this.p.subarray(this.v - 1);\r\n            var s = p.length > 3 ? gzs(p) : 4;\r\n            if (s > p.length) {\r\n                if (!final)\r\n                    return;\r\n            }\r\n            else if (this.v > 1 && this.onmember) {\r\n                this.onmember(this.r - p.length);\r\n            }\r\n            this.p = p.subarray(s), this.v = 0;\r\n        }\r\n        // necessary to prevent TS from using the closure value\r\n        // This allows for workerization to function correctly\r\n        Inflate.prototype.c.call(this, final);\r\n        // process concatenated GZIP\r\n        if (this.s.f && !this.s.l && !final) {\r\n            this.v = shft(this.s.p) + 9;\r\n            this.s = { i: 0 };\r\n            this.o = new u8(0);\r\n            this.push(new u8(0), final);\r\n        }\r\n    };\r\n    return Gunzip;\r\n}());\r\nexport { Gunzip };\r\n/**\r\n * Asynchronous streaming single or multi-member GZIP decompression\r\n */\r\nvar AsyncGunzip = /*#__PURE__*/ (function () {\r\n    function AsyncGunzip(opts, cb) {\r\n        var _this = this;\r\n        astrmify([\r\n            bInflt,\r\n            guze,\r\n            function () { return [astrm, Inflate, Gunzip]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Gunzip(ev.data);\r\n            strm.onmember = function (offset) { return postMessage(offset); };\r\n            onmessage = astrm(strm);\r\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\r\n    }\r\n    return AsyncGunzip;\r\n}());\r\nexport { AsyncGunzip };\r\nexport function gunzip(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bInflt,\r\n        guze,\r\n        function () { return [gunzipSync]; }\r\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\r\n}\r\n/**\r\n * Expands GZIP data\r\n * @param data The data to decompress\r\n * @param opts The decompression options\r\n * @returns The decompressed version of the data\r\n */\r\nexport function gunzipSync(data, opts) {\r\n    var st = gzs(data);\r\n    if (st + 8 > data.length)\r\n        err(6, 'invalid gzip data');\r\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\r\n}\r\n/**\r\n * Streaming Zlib compression\r\n */\r\nvar Zlib = /*#__PURE__*/ (function () {\r\n    function Zlib(opts, cb) {\r\n        this.c = adler();\r\n        this.v = 1;\r\n        Deflate.call(this, opts, cb);\r\n    }\r\n    /**\r\n     * Pushes a chunk to be zlibbed\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Zlib.prototype.push = function (chunk, final) {\r\n        this.c.p(chunk);\r\n        Deflate.prototype.push.call(this, chunk, final);\r\n    };\r\n    Zlib.prototype.p = function (c, f) {\r\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\r\n        if (this.v)\r\n            zlh(raw, this.o), this.v = 0;\r\n        if (f)\r\n            wbytes(raw, raw.length - 4, this.c.d());\r\n        this.ondata(raw, f);\r\n    };\r\n    /**\r\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\r\n     * zlibbed output for small inputs.\r\n     */\r\n    Zlib.prototype.flush = function () {\r\n        Deflate.prototype.flush.call(this);\r\n    };\r\n    return Zlib;\r\n}());\r\nexport { Zlib };\r\n/**\r\n * Asynchronous streaming Zlib compression\r\n */\r\nvar AsyncZlib = /*#__PURE__*/ (function () {\r\n    function AsyncZlib(opts, cb) {\r\n        astrmify([\r\n            bDflt,\r\n            zle,\r\n            function () { return [astrm, Deflate, Zlib]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Zlib(ev.data);\r\n            onmessage = astrm(strm);\r\n        }, 10, 1);\r\n    }\r\n    return AsyncZlib;\r\n}());\r\nexport { AsyncZlib };\r\nexport function zlib(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bDflt,\r\n        zle,\r\n        function () { return [zlibSync]; }\r\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\r\n}\r\n/**\r\n * Compress data with Zlib\r\n * @param data The data to compress\r\n * @param opts The compression options\r\n * @returns The zlib-compressed version of the data\r\n */\r\nexport function zlibSync(data, opts) {\r\n    if (!opts)\r\n        opts = {};\r\n    var a = adler();\r\n    a.p(data);\r\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\r\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\r\n}\r\n/**\r\n * Streaming Zlib decompression\r\n */\r\nvar Unzlib = /*#__PURE__*/ (function () {\r\n    function Unzlib(opts, cb) {\r\n        Inflate.call(this, opts, cb);\r\n        this.v = opts && opts.dictionary ? 2 : 1;\r\n    }\r\n    /**\r\n     * Pushes a chunk to be unzlibbed\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Unzlib.prototype.push = function (chunk, final) {\r\n        Inflate.prototype.e.call(this, chunk);\r\n        if (this.v) {\r\n            if (this.p.length < 6 && !final)\r\n                return;\r\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\r\n        }\r\n        if (final) {\r\n            if (this.p.length < 4)\r\n                err(6, 'invalid zlib data');\r\n            this.p = this.p.subarray(0, -4);\r\n        }\r\n        // necessary to prevent TS from using the closure value\r\n        // This allows for workerization to function correctly\r\n        Inflate.prototype.c.call(this, final);\r\n    };\r\n    return Unzlib;\r\n}());\r\nexport { Unzlib };\r\n/**\r\n * Asynchronous streaming Zlib decompression\r\n */\r\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\r\n    function AsyncUnzlib(opts, cb) {\r\n        astrmify([\r\n            bInflt,\r\n            zule,\r\n            function () { return [astrm, Inflate, Unzlib]; }\r\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\r\n            var strm = new Unzlib(ev.data);\r\n            onmessage = astrm(strm);\r\n        }, 11, 0);\r\n    }\r\n    return AsyncUnzlib;\r\n}());\r\nexport { AsyncUnzlib };\r\nexport function unzlib(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return cbify(data, opts, [\r\n        bInflt,\r\n        zule,\r\n        function () { return [unzlibSync]; }\r\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\r\n}\r\n/**\r\n * Expands Zlib data\r\n * @param data The data to decompress\r\n * @param opts The decompression options\r\n * @returns The decompressed version of the data\r\n */\r\nexport function unzlibSync(data, opts) {\r\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\r\n}\r\n// Default algorithm for compression (used because having a known output size allows faster decompression)\r\nexport { gzip as compress, AsyncGzip as AsyncCompress };\r\nexport { gzipSync as compressSync, Gzip as Compress };\r\n/**\r\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\r\n */\r\nvar Decompress = /*#__PURE__*/ (function () {\r\n    function Decompress(opts, cb) {\r\n        this.o = StrmOpt.call(this, opts, cb) || {};\r\n        this.G = Gunzip;\r\n        this.I = Inflate;\r\n        this.Z = Unzlib;\r\n    }\r\n    // init substream\r\n    // overriden by AsyncDecompress\r\n    Decompress.prototype.i = function () {\r\n        var _this = this;\r\n        this.s.ondata = function (dat, final) {\r\n            _this.ondata(dat, final);\r\n        };\r\n    };\r\n    /**\r\n     * Pushes a chunk to be decompressed\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Decompress.prototype.push = function (chunk, final) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        if (!this.s) {\r\n            if (this.p && this.p.length) {\r\n                var n = new u8(this.p.length + chunk.length);\r\n                n.set(this.p), n.set(chunk, this.p.length);\r\n            }\r\n            else\r\n                this.p = chunk;\r\n            if (this.p.length > 2) {\r\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\r\n                    ? new this.G(this.o)\r\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\r\n                        ? new this.I(this.o)\r\n                        : new this.Z(this.o);\r\n                this.i();\r\n                this.s.push(this.p, final);\r\n                this.p = null;\r\n            }\r\n        }\r\n        else\r\n            this.s.push(chunk, final);\r\n    };\r\n    return Decompress;\r\n}());\r\nexport { Decompress };\r\n/**\r\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\r\n */\r\nvar AsyncDecompress = /*#__PURE__*/ (function () {\r\n    function AsyncDecompress(opts, cb) {\r\n        Decompress.call(this, opts, cb);\r\n        this.queuedSize = 0;\r\n        this.G = AsyncGunzip;\r\n        this.I = AsyncInflate;\r\n        this.Z = AsyncUnzlib;\r\n    }\r\n    AsyncDecompress.prototype.i = function () {\r\n        var _this = this;\r\n        this.s.ondata = function (err, dat, final) {\r\n            _this.ondata(err, dat, final);\r\n        };\r\n        this.s.ondrain = function (size) {\r\n            _this.queuedSize -= size;\r\n            if (_this.ondrain)\r\n                _this.ondrain(size);\r\n        };\r\n    };\r\n    /**\r\n     * Pushes a chunk to be decompressed\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    AsyncDecompress.prototype.push = function (chunk, final) {\r\n        this.queuedSize += chunk.length;\r\n        Decompress.prototype.push.call(this, chunk, final);\r\n    };\r\n    return AsyncDecompress;\r\n}());\r\nexport { AsyncDecompress };\r\nexport function decompress(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\r\n        ? gunzip(data, opts, cb)\r\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\r\n            ? inflate(data, opts, cb)\r\n            : unzlib(data, opts, cb);\r\n}\r\n/**\r\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\r\n * @param data The data to decompress\r\n * @param opts The decompression options\r\n * @returns The decompressed version of the data\r\n */\r\nexport function decompressSync(data, opts) {\r\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\r\n        ? gunzipSync(data, opts)\r\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\r\n            ? inflateSync(data, opts)\r\n            : unzlibSync(data, opts);\r\n}\r\n// flatten a directory structure\r\nvar fltn = function (d, p, t, o) {\r\n    for (var k in d) {\r\n        var val = d[k], n = p + k, op = o;\r\n        if (Array.isArray(val))\r\n            op = mrg(o, val[1]), val = val[0];\r\n        if (val instanceof u8)\r\n            t[n] = [val, op];\r\n        else {\r\n            t[n += '/'] = [new u8(0), op];\r\n            fltn(val, n, t, o);\r\n        }\r\n    }\r\n};\r\n// text encoder\r\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\r\n// text decoder\r\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\r\n// text decoder stream\r\nvar tds = 0;\r\ntry {\r\n    td.decode(et, { stream: true });\r\n    tds = 1;\r\n}\r\ncatch (e) { }\r\n// decode UTF8\r\nvar dutf8 = function (d) {\r\n    for (var r = '', i = 0;;) {\r\n        var c = d[i++];\r\n        var eb = (c > 127) + (c > 223) + (c > 239);\r\n        if (i + eb > d.length)\r\n            return { s: r, r: slc(d, i - 1) };\r\n        if (!eb)\r\n            r += String.fromCharCode(c);\r\n        else if (eb == 3) {\r\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\r\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\r\n        }\r\n        else if (eb & 1)\r\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\r\n        else\r\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\r\n    }\r\n};\r\n/**\r\n * Streaming UTF-8 decoding\r\n */\r\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a UTF-8 decoding stream\r\n     * @param cb The callback to call whenever data is decoded\r\n     */\r\n    function DecodeUTF8(cb) {\r\n        this.ondata = cb;\r\n        if (tds)\r\n            this.t = new TextDecoder();\r\n        else\r\n            this.p = et;\r\n    }\r\n    /**\r\n     * Pushes a chunk to be decoded from UTF-8 binary\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    DecodeUTF8.prototype.push = function (chunk, final) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        final = !!final;\r\n        if (this.t) {\r\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\r\n            if (final) {\r\n                if (this.t.decode().length)\r\n                    err(8);\r\n                this.t = null;\r\n            }\r\n            return;\r\n        }\r\n        if (!this.p)\r\n            err(4);\r\n        var dat = new u8(this.p.length + chunk.length);\r\n        dat.set(this.p);\r\n        dat.set(chunk, this.p.length);\r\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\r\n        if (final) {\r\n            if (r.length)\r\n                err(8);\r\n            this.p = null;\r\n        }\r\n        else\r\n            this.p = r;\r\n        this.ondata(s, final);\r\n    };\r\n    return DecodeUTF8;\r\n}());\r\nexport { DecodeUTF8 };\r\n/**\r\n * Streaming UTF-8 encoding\r\n */\r\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a UTF-8 decoding stream\r\n     * @param cb The callback to call whenever data is encoded\r\n     */\r\n    function EncodeUTF8(cb) {\r\n        this.ondata = cb;\r\n    }\r\n    /**\r\n     * Pushes a chunk to be encoded to UTF-8\r\n     * @param chunk The string data to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    EncodeUTF8.prototype.push = function (chunk, final) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        if (this.d)\r\n            err(4);\r\n        this.ondata(strToU8(chunk), this.d = final || false);\r\n    };\r\n    return EncodeUTF8;\r\n}());\r\nexport { EncodeUTF8 };\r\n/**\r\n * Converts a string into a Uint8Array for use with compression/decompression methods\r\n * @param str The string to encode\r\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\r\n *               not need to be true unless decoding a binary string.\r\n * @returns The string encoded in UTF-8/Latin-1 binary\r\n */\r\nexport function strToU8(str, latin1) {\r\n    if (latin1) {\r\n        var ar_1 = new u8(str.length);\r\n        for (var i = 0; i < str.length; ++i)\r\n            ar_1[i] = str.charCodeAt(i);\r\n        return ar_1;\r\n    }\r\n    if (te)\r\n        return te.encode(str);\r\n    var l = str.length;\r\n    var ar = new u8(str.length + (str.length >> 1));\r\n    var ai = 0;\r\n    var w = function (v) { ar[ai++] = v; };\r\n    for (var i = 0; i < l; ++i) {\r\n        if (ai + 5 > ar.length) {\r\n            var n = new u8(ai + 8 + ((l - i) << 1));\r\n            n.set(ar);\r\n            ar = n;\r\n        }\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128 || latin1)\r\n            w(c);\r\n        else if (c < 2048)\r\n            w(192 | (c >> 6)), w(128 | (c & 63));\r\n        else if (c > 55295 && c < 57344)\r\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\r\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\r\n        else\r\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\r\n    }\r\n    return slc(ar, 0, ai);\r\n}\r\n/**\r\n * Converts a Uint8Array to a string\r\n * @param dat The data to decode to string\r\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\r\n *               not need to be true unless encoding to binary string.\r\n * @returns The original UTF-8/Latin-1 string\r\n */\r\nexport function strFromU8(dat, latin1) {\r\n    if (latin1) {\r\n        var r = '';\r\n        for (var i = 0; i < dat.length; i += 16384)\r\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\r\n        return r;\r\n    }\r\n    else if (td) {\r\n        return td.decode(dat);\r\n    }\r\n    else {\r\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\r\n        if (r.length)\r\n            err(8);\r\n        return s;\r\n    }\r\n}\r\n;\r\n// deflate bit flag\r\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\r\n// skip local zip header\r\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\r\n// read zip header\r\nvar zh = function (d, b, z) {\r\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\r\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\r\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\r\n};\r\n// read zip64 extra field\r\nvar z64e = function (d, b) {\r\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\r\n        ;\r\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\r\n};\r\n// extra field length\r\nvar exfl = function (ex) {\r\n    var le = 0;\r\n    if (ex) {\r\n        for (var k in ex) {\r\n            var l = ex[k].length;\r\n            if (l > 65535)\r\n                err(9);\r\n            le += l + 4;\r\n        }\r\n    }\r\n    return le;\r\n};\r\n// write zip header\r\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\r\n    var fl = fn.length, ex = f.extra, col = co && co.length;\r\n    var exl = exfl(ex);\r\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\r\n    if (ce != null)\r\n        d[b++] = 20, d[b++] = f.os;\r\n    d[b] = 20, b += 2; // spec compliance? what's that?\r\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\r\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\r\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\r\n    if (y < 0 || y > 119)\r\n        err(10);\r\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\r\n    if (c != -1) {\r\n        wbytes(d, b, f.crc);\r\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\r\n        wbytes(d, b + 8, f.size);\r\n    }\r\n    wbytes(d, b + 12, fl);\r\n    wbytes(d, b + 14, exl), b += 16;\r\n    if (ce != null) {\r\n        wbytes(d, b, col);\r\n        wbytes(d, b + 6, f.attrs);\r\n        wbytes(d, b + 10, ce), b += 14;\r\n    }\r\n    d.set(fn, b);\r\n    b += fl;\r\n    if (exl) {\r\n        for (var k in ex) {\r\n            var exf = ex[k], l = exf.length;\r\n            wbytes(d, b, +k);\r\n            wbytes(d, b + 2, l);\r\n            d.set(exf, b + 4), b += 4 + l;\r\n        }\r\n    }\r\n    if (col)\r\n        d.set(co, b), b += col;\r\n    return b;\r\n};\r\n// write zip footer (end of central directory)\r\nvar wzf = function (o, b, c, d, e) {\r\n    wbytes(o, b, 0x6054B50); // skip disk\r\n    wbytes(o, b + 8, c);\r\n    wbytes(o, b + 10, c);\r\n    wbytes(o, b + 12, d);\r\n    wbytes(o, b + 16, e);\r\n};\r\n/**\r\n * A pass-through stream to keep data uncompressed in a ZIP archive.\r\n */\r\nvar ZipPassThrough = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a pass-through stream that can be added to ZIP archives\r\n     * @param filename The filename to associate with this data stream\r\n     */\r\n    function ZipPassThrough(filename) {\r\n        this.filename = filename;\r\n        this.c = crc();\r\n        this.size = 0;\r\n        this.compression = 0;\r\n    }\r\n    /**\r\n     * Processes a chunk and pushes to the output stream. You can override this\r\n     * method in a subclass for custom behavior, but by default this passes\r\n     * the data through. You must call this.ondata(err, chunk, final) at some\r\n     * point in this method.\r\n     * @param chunk The chunk to process\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    ZipPassThrough.prototype.process = function (chunk, final) {\r\n        this.ondata(null, chunk, final);\r\n    };\r\n    /**\r\n     * Pushes a chunk to be added. If you are subclassing this with a custom\r\n     * compression algorithm, note that you must push data from the source\r\n     * file only, pre-compression.\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    ZipPassThrough.prototype.push = function (chunk, final) {\r\n        if (!this.ondata)\r\n            err(5);\r\n        this.c.p(chunk);\r\n        this.size += chunk.length;\r\n        if (final)\r\n            this.crc = this.c.d();\r\n        this.process(chunk, final || false);\r\n    };\r\n    return ZipPassThrough;\r\n}());\r\nexport { ZipPassThrough };\r\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\r\n/**\r\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\r\n * for better performance\r\n */\r\nvar ZipDeflate = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a DEFLATE stream that can be added to ZIP archives\r\n     * @param filename The filename to associate with this data stream\r\n     * @param opts The compression options\r\n     */\r\n    function ZipDeflate(filename, opts) {\r\n        var _this = this;\r\n        if (!opts)\r\n            opts = {};\r\n        ZipPassThrough.call(this, filename);\r\n        this.d = new Deflate(opts, function (dat, final) {\r\n            _this.ondata(null, dat, final);\r\n        });\r\n        this.compression = 8;\r\n        this.flag = dbf(opts.level);\r\n    }\r\n    ZipDeflate.prototype.process = function (chunk, final) {\r\n        try {\r\n            this.d.push(chunk, final);\r\n        }\r\n        catch (e) {\r\n            this.ondata(e, null, final);\r\n        }\r\n    };\r\n    /**\r\n     * Pushes a chunk to be deflated\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    ZipDeflate.prototype.push = function (chunk, final) {\r\n        ZipPassThrough.prototype.push.call(this, chunk, final);\r\n    };\r\n    return ZipDeflate;\r\n}());\r\nexport { ZipDeflate };\r\n/**\r\n * Asynchronous streaming DEFLATE compression for ZIP archives\r\n */\r\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\r\n     * @param filename The filename to associate with this data stream\r\n     * @param opts The compression options\r\n     */\r\n    function AsyncZipDeflate(filename, opts) {\r\n        var _this = this;\r\n        if (!opts)\r\n            opts = {};\r\n        ZipPassThrough.call(this, filename);\r\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\r\n            _this.ondata(err, dat, final);\r\n        });\r\n        this.compression = 8;\r\n        this.flag = dbf(opts.level);\r\n        this.terminate = this.d.terminate;\r\n    }\r\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\r\n        this.d.push(chunk, final);\r\n    };\r\n    /**\r\n     * Pushes a chunk to be deflated\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\r\n        ZipPassThrough.prototype.push.call(this, chunk, final);\r\n    };\r\n    return AsyncZipDeflate;\r\n}());\r\nexport { AsyncZipDeflate };\r\n// TODO: Better tree shaking\r\n/**\r\n * A zippable archive to which files can incrementally be added\r\n */\r\nvar Zip = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates an empty ZIP archive to which files can be added\r\n     * @param cb The callback to call whenever data for the generated ZIP archive\r\n     *           is available\r\n     */\r\n    function Zip(cb) {\r\n        this.ondata = cb;\r\n        this.u = [];\r\n        this.d = 1;\r\n    }\r\n    /**\r\n     * Adds a file to the ZIP archive\r\n     * @param file The file stream to add\r\n     */\r\n    Zip.prototype.add = function (file) {\r\n        var _this = this;\r\n        if (!this.ondata)\r\n            err(5);\r\n        // finishing or finished\r\n        if (this.d & 2)\r\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\r\n        else {\r\n            var f = strToU8(file.filename), fl_1 = f.length;\r\n            var com = file.comment, o = com && strToU8(com);\r\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\r\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\r\n            if (fl_1 > 65535)\r\n                this.ondata(err(11, 0, 1), null, false);\r\n            var header = new u8(hl_1);\r\n            wzh(header, 0, file, f, u, -1);\r\n            var chks_1 = [header];\r\n            var pAll_1 = function () {\r\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\r\n                    var chk = chks_2[_i];\r\n                    _this.ondata(null, chk, false);\r\n                }\r\n                chks_1 = [];\r\n            };\r\n            var tr_1 = this.d;\r\n            this.d = 0;\r\n            var ind_1 = this.u.length;\r\n            var uf_1 = mrg(file, {\r\n                f: f,\r\n                u: u,\r\n                o: o,\r\n                t: function () {\r\n                    if (file.terminate)\r\n                        file.terminate();\r\n                },\r\n                r: function () {\r\n                    pAll_1();\r\n                    if (tr_1) {\r\n                        var nxt = _this.u[ind_1 + 1];\r\n                        if (nxt)\r\n                            nxt.r();\r\n                        else\r\n                            _this.d = 1;\r\n                    }\r\n                    tr_1 = 1;\r\n                }\r\n            });\r\n            var cl_1 = 0;\r\n            file.ondata = function (err, dat, final) {\r\n                if (err) {\r\n                    _this.ondata(err, dat, final);\r\n                    _this.terminate();\r\n                }\r\n                else {\r\n                    cl_1 += dat.length;\r\n                    chks_1.push(dat);\r\n                    if (final) {\r\n                        var dd = new u8(16);\r\n                        wbytes(dd, 0, 0x8074B50);\r\n                        wbytes(dd, 4, file.crc);\r\n                        wbytes(dd, 8, cl_1);\r\n                        wbytes(dd, 12, file.size);\r\n                        chks_1.push(dd);\r\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\r\n                        if (tr_1)\r\n                            uf_1.r();\r\n                        tr_1 = 1;\r\n                    }\r\n                    else if (tr_1)\r\n                        pAll_1();\r\n                }\r\n            };\r\n            this.u.push(uf_1);\r\n        }\r\n    };\r\n    /**\r\n     * Ends the process of adding files and prepares to emit the final chunks.\r\n     * This *must* be called after adding all desired files for the resulting\r\n     * ZIP file to work properly.\r\n     */\r\n    Zip.prototype.end = function () {\r\n        var _this = this;\r\n        if (this.d & 2) {\r\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\r\n            return;\r\n        }\r\n        if (this.d)\r\n            this.e();\r\n        else\r\n            this.u.push({\r\n                r: function () {\r\n                    if (!(_this.d & 1))\r\n                        return;\r\n                    _this.u.splice(-1, 1);\r\n                    _this.e();\r\n                },\r\n                t: function () { }\r\n            });\r\n        this.d = 3;\r\n    };\r\n    Zip.prototype.e = function () {\r\n        var bt = 0, l = 0, tl = 0;\r\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\r\n            var f = _a[_i];\r\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\r\n        }\r\n        var out = new u8(tl + 22);\r\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\r\n            var f = _c[_b];\r\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\r\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\r\n        }\r\n        wzf(out, bt, this.u.length, tl, l);\r\n        this.ondata(null, out, true);\r\n        this.d = 2;\r\n    };\r\n    /**\r\n     * A method to terminate any internal workers used by the stream. Subsequent\r\n     * calls to add() will fail.\r\n     */\r\n    Zip.prototype.terminate = function () {\r\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\r\n            var f = _a[_i];\r\n            f.t();\r\n        }\r\n        this.d = 2;\r\n    };\r\n    return Zip;\r\n}());\r\nexport { Zip };\r\nexport function zip(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    var r = {};\r\n    fltn(data, '', r, opts);\r\n    var k = Object.keys(r);\r\n    var lft = k.length, o = 0, tot = 0;\r\n    var slft = lft, files = new Array(lft);\r\n    var term = [];\r\n    var tAll = function () {\r\n        for (var i = 0; i < term.length; ++i)\r\n            term[i]();\r\n    };\r\n    var cbd = function (a, b) {\r\n        mt(function () { cb(a, b); });\r\n    };\r\n    mt(function () { cbd = cb; });\r\n    var cbf = function () {\r\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\r\n        tot = 0;\r\n        for (var i = 0; i < slft; ++i) {\r\n            var f = files[i];\r\n            try {\r\n                var l = f.c.length;\r\n                wzh(out, tot, f, f.f, f.u, l);\r\n                var badd = 30 + f.f.length + exfl(f.extra);\r\n                var loc = tot + badd;\r\n                out.set(f.c, loc);\r\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\r\n            }\r\n            catch (e) {\r\n                return cbd(e, null);\r\n            }\r\n        }\r\n        wzf(out, o, files.length, cdl, oe);\r\n        cbd(null, out);\r\n    };\r\n    if (!lft)\r\n        cbf();\r\n    var _loop_1 = function (i) {\r\n        var fn = k[i];\r\n        var _a = r[fn], file = _a[0], p = _a[1];\r\n        var c = crc(), size = file.length;\r\n        c.p(file);\r\n        var f = strToU8(fn), s = f.length;\r\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\r\n        var exl = exfl(p.extra);\r\n        var compression = p.level == 0 ? 0 : 8;\r\n        var cbl = function (e, d) {\r\n            if (e) {\r\n                tAll();\r\n                cbd(e, null);\r\n            }\r\n            else {\r\n                var l = d.length;\r\n                files[i] = mrg(p, {\r\n                    size: size,\r\n                    crc: c.d(),\r\n                    c: d,\r\n                    f: f,\r\n                    m: m,\r\n                    u: s != fn.length || (m && (com.length != ms)),\r\n                    compression: compression\r\n                });\r\n                o += 30 + s + exl + l;\r\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\r\n                if (!--lft)\r\n                    cbf();\r\n            }\r\n        };\r\n        if (s > 65535)\r\n            cbl(err(11, 0, 1), null);\r\n        if (!compression)\r\n            cbl(null, file);\r\n        else if (size < 160000) {\r\n            try {\r\n                cbl(null, deflateSync(file, p));\r\n            }\r\n            catch (e) {\r\n                cbl(e, null);\r\n            }\r\n        }\r\n        else\r\n            term.push(deflate(file, p, cbl));\r\n    };\r\n    // Cannot use lft because it can decrease\r\n    for (var i = 0; i < slft; ++i) {\r\n        _loop_1(i);\r\n    }\r\n    return tAll;\r\n}\r\n/**\r\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\r\n * with more than one file.\r\n * @param data The directory structure for the ZIP archive\r\n * @param opts The main options, merged with per-file options\r\n * @returns The generated ZIP archive\r\n */\r\nexport function zipSync(data, opts) {\r\n    if (!opts)\r\n        opts = {};\r\n    var r = {};\r\n    var files = [];\r\n    fltn(data, '', r, opts);\r\n    var o = 0;\r\n    var tot = 0;\r\n    for (var fn in r) {\r\n        var _a = r[fn], file = _a[0], p = _a[1];\r\n        var compression = p.level == 0 ? 0 : 8;\r\n        var f = strToU8(fn), s = f.length;\r\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\r\n        var exl = exfl(p.extra);\r\n        if (s > 65535)\r\n            err(11);\r\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\r\n        var c = crc();\r\n        c.p(file);\r\n        files.push(mrg(p, {\r\n            size: file.length,\r\n            crc: c.d(),\r\n            c: d,\r\n            f: f,\r\n            m: m,\r\n            u: s != fn.length || (m && (com.length != ms)),\r\n            o: o,\r\n            compression: compression\r\n        }));\r\n        o += 30 + s + exl + l;\r\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\r\n    }\r\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\r\n    for (var i = 0; i < files.length; ++i) {\r\n        var f = files[i];\r\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\r\n        var badd = 30 + f.f.length + exfl(f.extra);\r\n        out.set(f.c, f.o + badd);\r\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\r\n    }\r\n    wzf(out, o, files.length, cdl, oe);\r\n    return out;\r\n}\r\n/**\r\n * Streaming pass-through decompression for ZIP archives\r\n */\r\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\r\n    function UnzipPassThrough() {\r\n    }\r\n    UnzipPassThrough.prototype.push = function (data, final) {\r\n        this.ondata(null, data, final);\r\n    };\r\n    UnzipPassThrough.compression = 0;\r\n    return UnzipPassThrough;\r\n}());\r\nexport { UnzipPassThrough };\r\n/**\r\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\r\n * better performance.\r\n */\r\nvar UnzipInflate = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a DEFLATE decompression that can be used in ZIP archives\r\n     */\r\n    function UnzipInflate() {\r\n        var _this = this;\r\n        this.i = new Inflate(function (dat, final) {\r\n            _this.ondata(null, dat, final);\r\n        });\r\n    }\r\n    UnzipInflate.prototype.push = function (data, final) {\r\n        try {\r\n            this.i.push(data, final);\r\n        }\r\n        catch (e) {\r\n            this.ondata(e, null, final);\r\n        }\r\n    };\r\n    UnzipInflate.compression = 8;\r\n    return UnzipInflate;\r\n}());\r\nexport { UnzipInflate };\r\n/**\r\n * Asynchronous streaming DEFLATE decompression for ZIP archives\r\n */\r\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a DEFLATE decompression that can be used in ZIP archives\r\n     */\r\n    function AsyncUnzipInflate(_, sz) {\r\n        var _this = this;\r\n        if (sz < 320000) {\r\n            this.i = new Inflate(function (dat, final) {\r\n                _this.ondata(null, dat, final);\r\n            });\r\n        }\r\n        else {\r\n            this.i = new AsyncInflate(function (err, dat, final) {\r\n                _this.ondata(err, dat, final);\r\n            });\r\n            this.terminate = this.i.terminate;\r\n        }\r\n    }\r\n    AsyncUnzipInflate.prototype.push = function (data, final) {\r\n        if (this.i.terminate)\r\n            data = slc(data, 0);\r\n        this.i.push(data, final);\r\n    };\r\n    AsyncUnzipInflate.compression = 8;\r\n    return AsyncUnzipInflate;\r\n}());\r\nexport { AsyncUnzipInflate };\r\n/**\r\n * A ZIP archive decompression stream that emits files as they are discovered\r\n */\r\nvar Unzip = /*#__PURE__*/ (function () {\r\n    /**\r\n     * Creates a ZIP decompression stream\r\n     * @param cb The callback to call whenever a file in the ZIP archive is found\r\n     */\r\n    function Unzip(cb) {\r\n        this.onfile = cb;\r\n        this.k = [];\r\n        this.o = {\r\n            0: UnzipPassThrough\r\n        };\r\n        this.p = et;\r\n    }\r\n    /**\r\n     * Pushes a chunk to be unzipped\r\n     * @param chunk The chunk to push\r\n     * @param final Whether this is the last chunk\r\n     */\r\n    Unzip.prototype.push = function (chunk, final) {\r\n        var _this = this;\r\n        if (!this.onfile)\r\n            err(5);\r\n        if (!this.p)\r\n            err(4);\r\n        if (this.c > 0) {\r\n            var len = Math.min(this.c, chunk.length);\r\n            var toAdd = chunk.subarray(0, len);\r\n            this.c -= len;\r\n            if (this.d)\r\n                this.d.push(toAdd, !this.c);\r\n            else\r\n                this.k[0].push(toAdd);\r\n            chunk = chunk.subarray(len);\r\n            if (chunk.length)\r\n                return this.push(chunk, final);\r\n        }\r\n        else {\r\n            var f = 0, i = 0, is = void 0, buf = void 0;\r\n            if (!this.p.length)\r\n                buf = chunk;\r\n            else if (!chunk.length)\r\n                buf = this.p;\r\n            else {\r\n                buf = new u8(this.p.length + chunk.length);\r\n                buf.set(this.p), buf.set(chunk, this.p.length);\r\n            }\r\n            var l = buf.length, oc = this.c, add = oc && this.d;\r\n            var _loop_2 = function () {\r\n                var _a;\r\n                var sig = b4(buf, i);\r\n                if (sig == 0x4034B50) {\r\n                    f = 1, is = i;\r\n                    this_1.d = null;\r\n                    this_1.c = 0;\r\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\r\n                    if (l > i + 30 + fnl + es) {\r\n                        var chks_3 = [];\r\n                        this_1.k.unshift(chks_3);\r\n                        f = 2;\r\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\r\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\r\n                        if (sc_1 == 4294967295) {\r\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\r\n                        }\r\n                        else if (dd)\r\n                            sc_1 = -1;\r\n                        i += es;\r\n                        this_1.c = sc_1;\r\n                        var d_1;\r\n                        var file_1 = {\r\n                            name: fn_1,\r\n                            compression: cmp_1,\r\n                            start: function () {\r\n                                if (!file_1.ondata)\r\n                                    err(5);\r\n                                if (!sc_1)\r\n                                    file_1.ondata(null, et, true);\r\n                                else {\r\n                                    var ctr = _this.o[cmp_1];\r\n                                    if (!ctr)\r\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\r\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\r\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\r\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\r\n                                        var dat = chks_4[_i];\r\n                                        d_1.push(dat, false);\r\n                                    }\r\n                                    if (_this.k[0] == chks_3 && _this.c)\r\n                                        _this.d = d_1;\r\n                                    else\r\n                                        d_1.push(et, true);\r\n                                }\r\n                            },\r\n                            terminate: function () {\r\n                                if (d_1 && d_1.terminate)\r\n                                    d_1.terminate();\r\n                            }\r\n                        };\r\n                        if (sc_1 >= 0)\r\n                            file_1.size = sc_1, file_1.originalSize = su_1;\r\n                        this_1.onfile(file_1);\r\n                    }\r\n                    return \"break\";\r\n                }\r\n                else if (oc) {\r\n                    if (sig == 0x8074B50) {\r\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\r\n                        return \"break\";\r\n                    }\r\n                    else if (sig == 0x2014B50) {\r\n                        is = i -= 4, f = 3, this_1.c = 0;\r\n                        return \"break\";\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (; i < l - 4; ++i) {\r\n                var state_1 = _loop_2();\r\n                if (state_1 === \"break\")\r\n                    break;\r\n            }\r\n            this.p = et;\r\n            if (oc < 0) {\r\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\r\n                if (add)\r\n                    add.push(dat, !!f);\r\n                else\r\n                    this.k[+(f == 2)].push(dat);\r\n            }\r\n            if (f & 2)\r\n                return this.push(buf.subarray(i), final);\r\n            this.p = buf.subarray(i);\r\n        }\r\n        if (final) {\r\n            if (this.c)\r\n                err(13);\r\n            this.p = null;\r\n        }\r\n    };\r\n    /**\r\n     * Registers a decoder with the stream, allowing for files compressed with\r\n     * the compression type provided to be expanded correctly\r\n     * @param decoder The decoder constructor\r\n     */\r\n    Unzip.prototype.register = function (decoder) {\r\n        this.o[decoder.compression] = decoder;\r\n    };\r\n    return Unzip;\r\n}());\r\nexport { Unzip };\r\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\r\nexport function unzip(data, opts, cb) {\r\n    if (!cb)\r\n        cb = opts, opts = {};\r\n    if (typeof cb != 'function')\r\n        err(7);\r\n    var term = [];\r\n    var tAll = function () {\r\n        for (var i = 0; i < term.length; ++i)\r\n            term[i]();\r\n    };\r\n    var files = {};\r\n    var cbd = function (a, b) {\r\n        mt(function () { cb(a, b); });\r\n    };\r\n    mt(function () { cbd = cb; });\r\n    var e = data.length - 22;\r\n    for (; b4(data, e) != 0x6054B50; --e) {\r\n        if (!e || data.length - e > 65558) {\r\n            cbd(err(13, 0, 1), null);\r\n            return tAll;\r\n        }\r\n    }\r\n    ;\r\n    var lft = b2(data, e + 8);\r\n    if (lft) {\r\n        var c = lft;\r\n        var o = b4(data, e + 16);\r\n        var z = o == 4294967295 || c == 65535;\r\n        if (z) {\r\n            var ze = b4(data, e - 12);\r\n            z = b4(data, ze) == 0x6064B50;\r\n            if (z) {\r\n                c = lft = b4(data, ze + 32);\r\n                o = b4(data, ze + 48);\r\n            }\r\n        }\r\n        var fltr = opts && opts.filter;\r\n        var _loop_3 = function (i) {\r\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\r\n            o = no;\r\n            var cbl = function (e, d) {\r\n                if (e) {\r\n                    tAll();\r\n                    cbd(e, null);\r\n                }\r\n                else {\r\n                    if (d)\r\n                        files[fn] = d;\r\n                    if (!--lft)\r\n                        cbd(null, files);\r\n                }\r\n            };\r\n            if (!fltr || fltr({\r\n                name: fn,\r\n                size: sc,\r\n                originalSize: su,\r\n                compression: c_1\r\n            })) {\r\n                if (!c_1)\r\n                    cbl(null, slc(data, b, b + sc));\r\n                else if (c_1 == 8) {\r\n                    var infl = data.subarray(b, b + sc);\r\n                    // Synchronously decompress under 512KB, or barely-compressed data\r\n                    if (su < 524288 || sc > 0.8 * su) {\r\n                        try {\r\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\r\n                        }\r\n                        catch (e) {\r\n                            cbl(e, null);\r\n                        }\r\n                    }\r\n                    else\r\n                        term.push(inflate(infl, { size: su }, cbl));\r\n                }\r\n                else\r\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\r\n            }\r\n            else\r\n                cbl(null, null);\r\n        };\r\n        for (var i = 0; i < c; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    }\r\n    else\r\n        cbd(null, {});\r\n    return tAll;\r\n}\r\n/**\r\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\r\n * performance with more than one file.\r\n * @param data The raw compressed ZIP file\r\n * @param opts The ZIP extraction options\r\n * @returns The decompressed files\r\n */\r\nexport function unzipSync(data, opts) {\r\n    var files = {};\r\n    var e = data.length - 22;\r\n    for (; b4(data, e) != 0x6054B50; --e) {\r\n        if (!e || data.length - e > 65558)\r\n            err(13);\r\n    }\r\n    ;\r\n    var c = b2(data, e + 8);\r\n    if (!c)\r\n        return {};\r\n    var o = b4(data, e + 16);\r\n    var z = o == 4294967295 || c == 65535;\r\n    if (z) {\r\n        var ze = b4(data, e - 12);\r\n        z = b4(data, ze) == 0x6064B50;\r\n        if (z) {\r\n            c = b4(data, ze + 32);\r\n            o = b4(data, ze + 48);\r\n        }\r\n    }\r\n    var fltr = opts && opts.filter;\r\n    for (var i = 0; i < c; ++i) {\r\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\r\n        o = no;\r\n        if (!fltr || fltr({\r\n            name: fn,\r\n            size: sc,\r\n            originalSize: su,\r\n            compression: c_2\r\n        })) {\r\n            if (!c_2)\r\n                files[fn] = slc(data, b, b + sc);\r\n            else if (c_2 == 8)\r\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\r\n            else\r\n                err(14, 'unknown compression type ' + c_2);\r\n        }\r\n    }\r\n    return files;\r\n}\r\n", "import {\r\n\tDataTextureLoader,\r\n\tDataUtils,\r\n\tFloatType,\r\n\tHalfFloatType,\r\n\tNoColorSpace,\r\n\tLinearFilter,\r\n\tLinearSRGBColorSpace,\r\n\tRedFormat,\r\n\tRGBAFormat\r\n} from 'three';\r\nimport * as fflate from '../libs/fflate.module.js';\r\n\r\n/**\r\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\r\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\r\n *\r\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\r\n * implementation, so I have preserved their copyright notices.\r\n */\r\n\r\n// /*\r\n// Copyright (c) 2014 - 2017, Syoyo Fujita\r\n// All rights reserved.\r\n\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//     * Redistributions of source code must retain the above copyright\r\n//       notice, this list of conditions and the following disclaimer.\r\n//     * Redistributions in binary form must reproduce the above copyright\r\n//       notice, this list of conditions and the following disclaimer in the\r\n//       documentation and/or other materials provided with the distribution.\r\n//     * Neither the name of the Syoyo Fujita nor the\r\n//       names of its contributors may be used to endorse or promote products\r\n//       derived from this software without specific prior written permission.\r\n\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// */\r\n\r\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\r\n\r\n// ///////////////////////////////////////////////////////////////////////////\r\n// //\r\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\r\n// // Digital Ltd. LLC\r\n// //\r\n// // All rights reserved.\r\n// //\r\n// // Redistribution and use in source and binary forms, with or without\r\n// // modification, are permitted provided that the following conditions are\r\n// // met:\r\n// // *       Redistributions of source code must retain the above copyright\r\n// // notice, this list of conditions and the following disclaimer.\r\n// // *       Redistributions in binary form must reproduce the above\r\n// // copyright notice, this list of conditions and the following disclaimer\r\n// // in the documentation and/or other materials provided with the\r\n// // distribution.\r\n// // *       Neither the name of Industrial Light & Magic nor the names of\r\n// // its contributors may be used to endorse or promote products derived\r\n// // from this software without specific prior written permission.\r\n// //\r\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// //\r\n// ///////////////////////////////////////////////////////////////////////////\r\n\r\n// // End of OpenEXR license -------------------------------------------------\r\n\r\nclass EXRLoader extends DataTextureLoader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.type = HalfFloatType;\r\n\r\n\t}\r\n\r\n\tparse( buffer ) {\r\n\r\n\t\tconst USHORT_RANGE = ( 1 << 16 );\r\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\r\n\r\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\r\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\r\n\r\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\r\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\r\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\r\n\r\n\t\tconst NBITS = 16;\r\n\t\tconst A_OFFSET = 1 << ( NBITS - 1 );\r\n\t\tconst MOD_MASK = ( 1 << NBITS ) - 1;\r\n\r\n\t\tconst SHORT_ZEROCODE_RUN = 59;\r\n\t\tconst LONG_ZEROCODE_RUN = 63;\r\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\r\n\r\n\t\tconst ULONG_SIZE = 8;\r\n\t\tconst FLOAT32_SIZE = 4;\r\n\t\tconst INT32_SIZE = 4;\r\n\t\tconst INT16_SIZE = 2;\r\n\t\tconst INT8_SIZE = 1;\r\n\r\n\t\tconst STATIC_HUFFMAN = 0;\r\n\t\tconst DEFLATE = 1;\r\n\r\n\t\tconst UNKNOWN = 0;\r\n\t\tconst LOSSY_DCT = 1;\r\n\t\tconst RLE = 2;\r\n\r\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\r\n\r\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\r\n\r\n\t\t\tlet k = 0;\r\n\r\n\t\t\tfor ( let i = 0; i < USHORT_RANGE; ++ i ) {\r\n\r\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\r\n\r\n\t\t\t\t\tlut[ k ++ ] = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst n = k - 1;\r\n\r\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\r\n\r\n\t\t\treturn n;\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufClearDecTable( hdec ) {\r\n\r\n\t\t\tfor ( let i = 0; i < HUF_DECSIZE; i ++ ) {\r\n\r\n\t\t\t\thdec[ i ] = {};\r\n\t\t\t\thdec[ i ].len = 0;\r\n\t\t\t\thdec[ i ].lit = 0;\r\n\t\t\t\thdec[ i ].p = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\r\n\r\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\r\n\r\n\t\t\twhile ( lc < nBits ) {\r\n\r\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\r\n\t\t\t\tlc += 8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlc -= nBits;\r\n\r\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\r\n\t\t\tgetBitsReturn.c = c;\r\n\t\t\tgetBitsReturn.lc = lc;\r\n\r\n\t\t}\r\n\r\n\t\tconst hufTableBuffer = new Array( 59 );\r\n\r\n\t\tfunction hufCanonicalCodeTable( hcode ) {\r\n\r\n\t\t\tfor ( let i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\r\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\r\n\r\n\t\t\tlet c = 0;\r\n\r\n\t\t\tfor ( let i = 58; i > 0; -- i ) {\r\n\r\n\t\t\t\tconst nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\r\n\t\t\t\thufTableBuffer[ i ] = c;\r\n\t\t\t\tc = nc;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < HUF_ENCSIZE; ++ i ) {\r\n\r\n\t\t\t\tconst l = hcode[ i ];\r\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, hcode ) {\r\n\r\n\t\t\tconst p = inOffset;\r\n\t\t\tlet c = 0;\r\n\t\t\tlet lc = 0;\r\n\r\n\t\t\tfor ( ; im <= iM; im ++ ) {\r\n\r\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\r\n\r\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\r\n\r\n\t\t\t\tconst l = getBitsReturn.l;\r\n\t\t\t\tc = getBitsReturn.c;\r\n\t\t\t\tlc = getBitsReturn.lc;\r\n\r\n\t\t\t\thcode[ im ] = l;\r\n\r\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\r\n\r\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\r\n\r\n\t\t\t\t\tlet zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\r\n\t\t\t\t\tc = getBitsReturn.c;\r\n\t\t\t\t\tlc = getBitsReturn.lc;\r\n\r\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\r\n\r\n\t\t\t\t\tim --;\r\n\r\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\r\n\r\n\t\t\t\t\tlet zerun = l - SHORT_ZEROCODE_RUN + 2;\r\n\r\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Something wrong with hufUnpackEncTable' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\r\n\r\n\t\t\t\t\tim --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\thufCanonicalCodeTable( hcode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufLength( code ) {\r\n\r\n\t\t\treturn code & 63;\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufCode( code ) {\r\n\r\n\t\t\treturn code >> 6;\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\r\n\r\n\t\t\tfor ( ; im <= iM; im ++ ) {\r\n\r\n\t\t\t\tconst c = hufCode( hcode[ im ] );\r\n\t\t\t\tconst l = hufLength( hcode[ im ] );\r\n\r\n\t\t\t\tif ( c >> l ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Invalid table entry' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( l > HUF_DECBITS ) {\r\n\r\n\t\t\t\t\tconst pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\r\n\r\n\t\t\t\t\tif ( pl.len ) {\r\n\r\n\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpl.lit ++;\r\n\r\n\t\t\t\t\tif ( pl.p ) {\r\n\r\n\t\t\t\t\t\tconst p = pl.p;\r\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\r\n\r\n\t\t\t\t\t\tfor ( let i = 0; i < pl.lit - 1; ++ i ) {\r\n\r\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpl.p = new Array( 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\r\n\r\n\t\t\t\t} else if ( l ) {\r\n\r\n\t\t\t\t\tlet plOffset = 0;\r\n\r\n\t\t\t\t\tfor ( let i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\r\n\r\n\t\t\t\t\t\tconst pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\r\n\r\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\r\n\r\n\t\t\t\t\t\t\tthrow new Error( 'Invalid table entry' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpl.len = l;\r\n\t\t\t\t\t\tpl.lit = im;\r\n\r\n\t\t\t\t\t\tplOffset ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst getCharReturn = { c: 0, lc: 0 };\r\n\r\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\r\n\r\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\r\n\t\t\tlc += 8;\r\n\r\n\t\t\tgetCharReturn.c = c;\r\n\t\t\tgetCharReturn.lc = lc;\r\n\r\n\t\t}\r\n\r\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\r\n\r\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\r\n\r\n\t\t\tif ( po == rlc ) {\r\n\r\n\t\t\t\tif ( lc < 8 ) {\r\n\r\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\r\n\t\t\t\t\tc = getCharReturn.c;\r\n\t\t\t\t\tlc = getCharReturn.lc;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlc -= 8;\r\n\r\n\t\t\t\tlet cs = ( c >> lc );\r\n\t\t\t\tcs = new Uint8Array( [ cs ] )[ 0 ];\r\n\r\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst s = outBuffer[ outBufferOffset.value - 1 ];\r\n\r\n\t\t\t\twhile ( cs -- > 0 ) {\r\n\r\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\r\n\r\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgetCodeReturn.c = c;\r\n\t\t\tgetCodeReturn.lc = lc;\r\n\r\n\t\t}\r\n\r\n\t\tfunction UInt16( value ) {\r\n\r\n\t\t\treturn ( value & 0xFFFF );\r\n\r\n\t\t}\r\n\r\n\t\tfunction Int16( value ) {\r\n\r\n\t\t\tconst ref = UInt16( value );\r\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\r\n\r\n\t\t}\r\n\r\n\t\tconst wdec14Return = { a: 0, b: 0 };\r\n\r\n\t\tfunction wdec14( l, h ) {\r\n\r\n\t\t\tconst ls = Int16( l );\r\n\t\t\tconst hs = Int16( h );\r\n\r\n\t\t\tconst hi = hs;\r\n\t\t\tconst ai = ls + ( hi & 1 ) + ( hi >> 1 );\r\n\r\n\t\t\tconst as = ai;\r\n\t\t\tconst bs = ai - hi;\r\n\r\n\t\t\twdec14Return.a = as;\r\n\t\t\twdec14Return.b = bs;\r\n\r\n\t\t}\r\n\r\n\t\tfunction wdec16( l, h ) {\r\n\r\n\t\t\tconst m = UInt16( l );\r\n\t\t\tconst d = UInt16( h );\r\n\r\n\t\t\tconst bb = ( m - ( d >> 1 ) ) & MOD_MASK;\r\n\t\t\tconst aa = ( d + bb - A_OFFSET ) & MOD_MASK;\r\n\r\n\t\t\twdec14Return.a = aa;\r\n\t\t\twdec14Return.b = bb;\r\n\r\n\t\t}\r\n\r\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy, mx ) {\r\n\r\n\t\t\tconst w14 = mx < ( 1 << 14 );\r\n\t\t\tconst n = ( nx > ny ) ? ny : nx;\r\n\t\t\tlet p = 1;\r\n\t\t\tlet p2;\r\n\t\t\tlet py;\r\n\r\n\t\t\twhile ( p <= n ) p <<= 1;\r\n\r\n\t\t\tp >>= 1;\r\n\t\t\tp2 = p;\r\n\t\t\tp >>= 1;\r\n\r\n\t\t\twhile ( p >= 1 ) {\r\n\r\n\t\t\t\tpy = 0;\r\n\t\t\t\tconst ey = py + oy * ( ny - p2 );\r\n\t\t\t\tconst oy1 = oy * p;\r\n\t\t\t\tconst oy2 = oy * p2;\r\n\t\t\t\tconst ox1 = ox * p;\r\n\t\t\t\tconst ox2 = ox * p2;\r\n\t\t\t\tlet i00, i01, i10, i11;\r\n\r\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\r\n\r\n\t\t\t\t\tlet px = py;\r\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\r\n\r\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\r\n\r\n\t\t\t\t\t\tconst p01 = px + ox1;\r\n\t\t\t\t\t\tconst p10 = px + oy1;\r\n\t\t\t\t\t\tconst p11 = p10 + ox1;\r\n\r\n\t\t\t\t\t\tif ( w14 ) {\r\n\r\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\r\n\r\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\r\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\r\n\r\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\r\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec14( i00, i01 );\r\n\r\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\r\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec14( i10, i11 );\r\n\r\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\r\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\r\n\r\n\t\t\t\t\t\t\ti00 = wdec14Return.a;\r\n\t\t\t\t\t\t\ti10 = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec16( buffer[ p01 + j ], buffer[ p11 + j ] );\r\n\r\n\t\t\t\t\t\t\ti01 = wdec14Return.a;\r\n\t\t\t\t\t\t\ti11 = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec16( i00, i01 );\r\n\r\n\t\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\r\n\t\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\r\n\r\n\t\t\t\t\t\t\twdec16( i10, i11 );\r\n\r\n\t\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\r\n\t\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\r\n\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( nx & p ) {\r\n\r\n\t\t\t\t\t\tconst p10 = px + oy1;\r\n\r\n\t\t\t\t\t\tif ( w14 )\r\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p10 + j ] );\r\n\r\n\t\t\t\t\t\ti00 = wdec14Return.a;\r\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\r\n\r\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ny & p ) {\r\n\r\n\t\t\t\t\tlet px = py;\r\n\t\t\t\t\tconst ex = py + ox * ( nx - p2 );\r\n\r\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\r\n\r\n\t\t\t\t\t\tconst p01 = px + ox1;\r\n\r\n\t\t\t\t\t\tif ( w14 )\r\n\t\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\twdec16( buffer[ px + j ], buffer[ p01 + j ] );\r\n\r\n\t\t\t\t\t\ti00 = wdec14Return.a;\r\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\r\n\r\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp2 = p;\r\n\t\t\t\tp >>= 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn py;\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inOffset, ni, rlc, no, outBuffer, outOffset ) {\r\n\r\n\t\t\tlet c = 0;\r\n\t\t\tlet lc = 0;\r\n\t\t\tconst outBufferEndOffset = no;\r\n\t\t\tconst inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\r\n\r\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\r\n\r\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\r\n\r\n\t\t\t\tc = getCharReturn.c;\r\n\t\t\t\tlc = getCharReturn.lc;\r\n\r\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\r\n\r\n\t\t\t\t\tconst index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\r\n\t\t\t\t\tconst pl = decodingTable[ index ];\r\n\r\n\t\t\t\t\tif ( pl.len ) {\r\n\r\n\t\t\t\t\t\tlc -= pl.len;\r\n\r\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\r\n\r\n\t\t\t\t\t\tc = getCodeReturn.c;\r\n\t\t\t\t\t\tlc = getCodeReturn.lc;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ! pl.p ) {\r\n\r\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet j;\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst l = hufLength( encodingTable[ pl.p[ j ] ] );\r\n\r\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\r\n\r\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\r\n\r\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\r\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( lc >= l ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\r\n\r\n\t\t\t\t\t\t\t\t\tlc -= l;\r\n\r\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\r\n\r\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\r\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\r\n\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( j == pl.lit ) {\r\n\r\n\t\t\t\t\t\t\tthrow new Error( 'hufDecode issues' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst i = ( 8 - ni ) & 7;\r\n\r\n\t\t\tc >>= i;\r\n\t\t\tlc -= i;\r\n\r\n\t\t\twhile ( lc > 0 ) {\r\n\r\n\t\t\t\tconst pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\r\n\r\n\t\t\t\tif ( pl.len ) {\r\n\r\n\t\t\t\t\tlc -= pl.len;\r\n\r\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inOffset, outBuffer, outOffset, outBufferEndOffset );\r\n\r\n\t\t\t\t\tc = getCodeReturn.c;\r\n\t\t\t\t\tlc = getCodeReturn.lc;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'hufDecode issues' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\r\n\r\n\t\t\tconst outOffset = { value: 0 };\r\n\t\t\tconst initialInOffset = inOffset.value;\r\n\r\n\t\t\tconst im = parseUint32( inDataView, inOffset );\r\n\t\t\tconst iM = parseUint32( inDataView, inOffset );\r\n\r\n\t\t\tinOffset.value += 4;\r\n\r\n\t\t\tconst nBits = parseUint32( inDataView, inOffset );\r\n\r\n\t\t\tinOffset.value += 4;\r\n\r\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\r\n\r\n\t\t\t\tthrow new Error( 'Something wrong with HUF_ENCSIZE' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst freq = new Array( HUF_ENCSIZE );\r\n\t\t\tconst hdec = new Array( HUF_DECSIZE );\r\n\r\n\t\t\thufClearDecTable( hdec );\r\n\r\n\t\t\tconst ni = nCompressed - ( inOffset.value - initialInOffset );\r\n\r\n\t\t\thufUnpackEncTable( uInt8Array, inOffset, ni, im, iM, freq );\r\n\r\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'Something wrong with hufUncompress' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\r\n\r\n\t\t\thufDecode( freq, hdec, uInt8Array, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyLut( lut, data, nData ) {\r\n\r\n\t\t\tfor ( let i = 0; i < nData; ++ i ) {\r\n\r\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction predictor( source ) {\r\n\r\n\t\t\tfor ( let t = 1; t < source.length; t ++ ) {\r\n\r\n\t\t\t\tconst d = source[ t - 1 ] + source[ t ] - 128;\r\n\t\t\t\tsource[ t ] = d;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction interleaveScalar( source, out ) {\r\n\r\n\t\t\tlet t1 = 0;\r\n\t\t\tlet t2 = Math.floor( ( source.length + 1 ) / 2 );\r\n\t\t\tlet s = 0;\r\n\t\t\tconst stop = source.length - 1;\r\n\r\n\t\t\twhile ( true ) {\r\n\r\n\t\t\t\tif ( s > stop ) break;\r\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\r\n\r\n\t\t\t\tif ( s > stop ) break;\r\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction decodeRunLength( source ) {\r\n\r\n\t\t\tlet size = source.byteLength;\r\n\t\t\tconst out = new Array();\r\n\t\t\tlet p = 0;\r\n\r\n\t\t\tconst reader = new DataView( source );\r\n\r\n\t\t\twhile ( size > 0 ) {\r\n\r\n\t\t\t\tconst l = reader.getInt8( p ++ );\r\n\r\n\t\t\t\tif ( l < 0 ) {\r\n\r\n\t\t\t\t\tconst count = - l;\r\n\t\t\t\t\tsize -= count + 1;\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst count = l;\r\n\t\t\t\t\tsize -= 2;\r\n\r\n\t\t\t\t\tconst value = reader.getUint8( p ++ );\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < count + 1; i ++ ) {\r\n\r\n\t\t\t\t\t\tout.push( value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn out;\r\n\r\n\t\t}\r\n\r\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\r\n\r\n\t\t\tlet dataView = new DataView( outBuffer.buffer );\r\n\r\n\t\t\tconst width = channelData[ cscSet.idx[ 0 ] ].width;\r\n\t\t\tconst height = channelData[ cscSet.idx[ 0 ] ].height;\r\n\r\n\t\t\tconst numComp = 3;\r\n\r\n\t\t\tconst numFullBlocksX = Math.floor( width / 8.0 );\r\n\t\t\tconst numBlocksX = Math.ceil( width / 8.0 );\r\n\t\t\tconst numBlocksY = Math.ceil( height / 8.0 );\r\n\t\t\tconst leftoverX = width - ( numBlocksX - 1 ) * 8;\r\n\t\t\tconst leftoverY = height - ( numBlocksY - 1 ) * 8;\r\n\r\n\t\t\tconst currAcComp = { value: 0 };\r\n\t\t\tconst currDcComp = new Array( numComp );\r\n\t\t\tconst dctData = new Array( numComp );\r\n\t\t\tconst halfZigBlock = new Array( numComp );\r\n\t\t\tconst rowBlock = new Array( numComp );\r\n\t\t\tconst rowOffsets = new Array( numComp );\r\n\r\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\r\n\r\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\r\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\r\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\r\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\r\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\r\n\r\n\t\t\t\tlet maxY = 8;\r\n\r\n\t\t\t\tif ( blocky == numBlocksY - 1 )\r\n\t\t\t\t\tmaxY = leftoverY;\r\n\r\n\t\t\t\tlet maxX = 8;\r\n\r\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\r\n\r\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\r\n\t\t\t\t\t\tmaxX = leftoverX;\r\n\r\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\r\n\r\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\r\n\r\n\t\t\t\t\t\t// set block DC component\r\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\r\n\t\t\t\t\t\t// set block AC components\r\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\r\n\r\n\t\t\t\t\t\t// UnZigZag block to float\r\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\r\n\t\t\t\t\t\t// decode float dct\r\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( numComp == 3 ) {\r\n\r\n\t\t\t\t\t\tcsc709Inverse( dctData );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\r\n\r\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // blockx\r\n\r\n\t\t\t\tlet offset = 0;\r\n\r\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\r\n\r\n\t\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\r\n\r\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\r\n\r\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\r\n\r\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\r\n\r\n\t\t\t\t\t\t\tconst src = blockx * 64 + ( ( y & 0x7 ) * 8 );\r\n\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\r\n\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\r\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\r\n\r\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// handle partial X blocks\r\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\r\n\r\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\r\n\r\n\t\t\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\r\n\t\t\t\t\t\t\tconst src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\r\n\r\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\r\n\r\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // comp\r\n\r\n\t\t\t} // blocky\r\n\r\n\t\t\tconst halfRow = new Uint16Array( width );\r\n\t\t\tdataView = new DataView( outBuffer.buffer );\r\n\r\n\t\t\t// convert channels back to float, if needed\r\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\r\n\r\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\r\n\t\t\t\tconst type = channelData[ cscSet.idx[ comp ] ].type;\r\n\r\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\r\n\r\n\t\t\t\tfor ( let y = 0; y < height; ++ y ) {\r\n\r\n\t\t\t\t\tconst offset = rowOffsets[ comp ][ y ];\r\n\r\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\r\n\r\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let x = 0; x < width; ++ x ) {\r\n\r\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\r\n\r\n\t\t\tlet acValue;\r\n\t\t\tlet dctComp = 1;\r\n\r\n\t\t\twhile ( dctComp < 64 ) {\r\n\r\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\r\n\r\n\t\t\t\tif ( acValue == 0xff00 ) {\r\n\r\n\t\t\t\t\tdctComp = 64;\r\n\r\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\r\n\r\n\t\t\t\t\tdctComp += acValue & 0xff;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\r\n\t\t\t\t\tdctComp ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrAcComp.value ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction unZigZag( src, dst ) {\r\n\r\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\r\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\r\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\r\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\r\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\r\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\r\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\r\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\r\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\r\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\r\n\r\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\r\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\r\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\r\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\r\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\r\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\r\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\r\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\r\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\r\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\r\n\r\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\r\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\r\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\r\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\r\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\r\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\r\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\r\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\r\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\r\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\r\n\r\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\r\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\r\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\r\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\r\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\r\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\r\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\r\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\r\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\r\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\r\n\r\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\r\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\r\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\r\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\r\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\r\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\r\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\r\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\r\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\r\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\r\n\r\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\r\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\r\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\r\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\r\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\r\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\r\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\r\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\r\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\r\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\r\n\r\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\r\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\r\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\r\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\r\n\r\n\t\t}\r\n\r\n\t\tfunction dctInverse( data ) {\r\n\r\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\r\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\r\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\r\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\r\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\r\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\r\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\r\n\r\n\t\t\tconst alpha = new Array( 4 );\r\n\t\t\tconst beta = new Array( 4 );\r\n\t\t\tconst theta = new Array( 4 );\r\n\t\t\tconst gamma = new Array( 4 );\r\n\r\n\t\t\tfor ( let row = 0; row < 8; ++ row ) {\r\n\r\n\t\t\t\tconst rowPtr = row * 8;\r\n\r\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\r\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\r\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\r\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\r\n\r\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\r\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\r\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\r\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\r\n\r\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\r\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\r\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\r\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\r\n\r\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\r\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\r\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\r\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\r\n\r\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\r\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\r\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\r\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\r\n\r\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\r\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\r\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\r\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let column = 0; column < 8; ++ column ) {\r\n\r\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\r\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\r\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\r\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\r\n\r\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\r\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\r\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\r\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\r\n\r\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\r\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\r\n\r\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\r\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\r\n\r\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\r\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\r\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\r\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\r\n\r\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\r\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\r\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\r\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\r\n\r\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\r\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\r\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\r\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction csc709Inverse( data ) {\r\n\r\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\r\n\r\n\t\t\t\tconst y = data[ 0 ][ i ];\r\n\t\t\t\tconst cb = data[ 1 ][ i ];\r\n\t\t\t\tconst cr = data[ 2 ][ i ];\r\n\r\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\r\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\r\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction convertToHalf( src, dst, idx ) {\r\n\r\n\t\t\tfor ( let i = 0; i < 64; ++ i ) {\r\n\r\n\t\t\t\tdst[ idx + i ] = DataUtils.toHalfFloat( toLinear( src[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction toLinear( float ) {\r\n\r\n\t\t\tif ( float <= 1 ) {\r\n\r\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressRAW( info ) {\r\n\r\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressRLE( info ) {\r\n\r\n\t\t\tconst compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\r\n\r\n\t\t\tconst rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\r\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\r\n\r\n\t\t\tpredictor( rawBuffer ); // revert predictor\r\n\r\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\r\n\r\n\t\t\treturn new DataView( tmpBuffer.buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressZIP( info ) {\r\n\r\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\r\n\r\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\r\n\t\t\tconst tmpBuffer = new Uint8Array( rawBuffer.length );\r\n\r\n\t\t\tpredictor( rawBuffer ); // revert predictor\r\n\r\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\r\n\r\n\t\t\treturn new DataView( tmpBuffer.buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressPIZ( info ) {\r\n\r\n\t\t\tconst inDataView = info.viewer;\r\n\t\t\tconst inOffset = { value: info.offset.value };\r\n\r\n\t\t\tconst outBuffer = new Uint16Array( info.columns * info.lines * ( info.inputChannels.length * info.type ) );\r\n\t\t\tconst bitmap = new Uint8Array( BITMAP_SIZE );\r\n\r\n\t\t\t// Setup channel info\r\n\t\t\tlet outBufferEnd = 0;\r\n\t\t\tconst pizChannelData = new Array( info.inputChannels.length );\r\n\t\t\tfor ( let i = 0, il = info.inputChannels.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tpizChannelData[ i ] = {};\r\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\r\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\r\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.columns;\r\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\r\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\r\n\r\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read range compression data\r\n\r\n\t\t\tconst minNonZero = parseUint16( inDataView, inOffset );\r\n\t\t\tconst maxNonZero = parseUint16( inDataView, inOffset );\r\n\r\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\r\n\r\n\t\t\t\tthrow new Error( 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( minNonZero <= maxNonZero ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\r\n\r\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Reverse LUT\r\n\t\t\tconst lut = new Uint16Array( USHORT_RANGE );\r\n\t\t\tconst maxValue = reverseLutFromBitmap( bitmap, lut );\r\n\r\n\t\t\tconst length = parseUint32( inDataView, inOffset );\r\n\r\n\t\t\t// Huffman decoding\r\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\r\n\r\n\t\t\t// Wavelet decoding\r\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\r\n\r\n\t\t\t\tconst cd = pizChannelData[ i ];\r\n\r\n\t\t\t\tfor ( let j = 0; j < pizChannelData[ i ].size; ++ j ) {\r\n\r\n\t\t\t\t\twav2Decode(\r\n\t\t\t\t\t\toutBuffer,\r\n\t\t\t\t\t\tcd.start + j,\r\n\t\t\t\t\t\tcd.nx,\r\n\t\t\t\t\t\tcd.size,\r\n\t\t\t\t\t\tcd.ny,\r\n\t\t\t\t\t\tcd.nx * cd.size,\r\n\t\t\t\t\t\tmaxValue\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Expand the pixel data to their original range\r\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\r\n\r\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\r\n\t\t\tlet tmpOffset = 0;\r\n\t\t\tconst tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\r\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\r\n\r\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\r\n\r\n\t\t\t\t\tconst cd = pizChannelData[ c ];\r\n\r\n\t\t\t\t\tconst n = cd.nx * cd.size;\r\n\t\t\t\t\tconst cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\r\n\r\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\r\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\r\n\t\t\t\t\tcd.end += n;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new DataView( tmpBuffer.buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressPXR( info ) {\r\n\r\n\t\t\tconst compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\r\n\r\n\t\t\tconst rawBuffer = fflate.unzlibSync( compressed );\r\n\r\n\t\t\tconst byteSize = info.inputChannels.length * info.lines * info.columns * info.totalBytes;\r\n\t\t\tconst tmpBuffer = new ArrayBuffer( byteSize );\r\n\t\t\tconst viewer = new DataView( tmpBuffer );\r\n\r\n\t\t\tlet tmpBufferEnd = 0;\r\n\t\t\tlet writePtr = 0;\r\n\t\t\tconst ptr = new Array( 4 );\r\n\r\n\t\t\tfor ( let y = 0; y < info.lines; y ++ ) {\r\n\r\n\t\t\t\tfor ( let c = 0; c < info.inputChannels.length; c ++ ) {\r\n\r\n\t\t\t\t\tlet pixel = 0;\r\n\r\n\t\t\t\t\tconst type = info.inputChannels[ c ].pixelType;\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase 1:\r\n\r\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\r\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\r\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 1 ] + info.columns;\r\n\r\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\r\n\r\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 8 ) | rawBuffer[ ptr[ 1 ] ++ ];\r\n\r\n\t\t\t\t\t\t\t\tpixel += diff;\r\n\r\n\t\t\t\t\t\t\t\tviewer.setUint16( writePtr, pixel, true );\r\n\t\t\t\t\t\t\t\twritePtr += 2;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 2:\r\n\r\n\t\t\t\t\t\t\tptr[ 0 ] = tmpBufferEnd;\r\n\t\t\t\t\t\t\tptr[ 1 ] = ptr[ 0 ] + info.columns;\r\n\t\t\t\t\t\t\tptr[ 2 ] = ptr[ 1 ] + info.columns;\r\n\t\t\t\t\t\t\ttmpBufferEnd = ptr[ 2 ] + info.columns;\r\n\r\n\t\t\t\t\t\t\tfor ( let j = 0; j < info.columns; ++ j ) {\r\n\r\n\t\t\t\t\t\t\t\tconst diff = ( rawBuffer[ ptr[ 0 ] ++ ] << 24 ) | ( rawBuffer[ ptr[ 1 ] ++ ] << 16 ) | ( rawBuffer[ ptr[ 2 ] ++ ] << 8 );\r\n\r\n\t\t\t\t\t\t\t\tpixel += diff;\r\n\r\n\t\t\t\t\t\t\t\tviewer.setUint32( writePtr, pixel, true );\r\n\t\t\t\t\t\t\t\twritePtr += 4;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn viewer;\r\n\r\n\t\t}\r\n\r\n\t\tfunction uncompressDWA( info ) {\r\n\r\n\t\t\tconst inDataView = info.viewer;\r\n\t\t\tconst inOffset = { value: info.offset.value };\r\n\t\t\tconst outBuffer = new Uint8Array( info.columns * info.lines * ( info.inputChannels.length * info.type * INT16_SIZE ) );\r\n\r\n\t\t\t// Read compression header information\r\n\t\t\tconst dwaHeader = {\r\n\r\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\r\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\r\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\r\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\r\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( dwaHeader.version < 2 )\r\n\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported' );\r\n\r\n\t\t\t// Read channel ruleset information\r\n\t\t\tconst channelRules = new Array();\r\n\t\t\tlet ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\r\n\r\n\t\t\twhile ( ruleSize > 0 ) {\r\n\r\n\t\t\t\tconst name = parseNullTerminatedString( inDataView.buffer, inOffset );\r\n\t\t\t\tconst value = parseUint8( inDataView, inOffset );\r\n\t\t\t\tconst compression = ( value >> 2 ) & 3;\r\n\t\t\t\tconst csc = ( value >> 4 ) - 1;\r\n\t\t\t\tconst index = new Int8Array( [ csc ] )[ 0 ];\r\n\t\t\t\tconst type = parseUint8( inDataView, inOffset );\r\n\r\n\t\t\t\tchannelRules.push( {\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tcompression: compression,\r\n\t\t\t\t} );\r\n\r\n\t\t\t\truleSize -= name.length + 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Classify channels\r\n\t\t\tconst channels = EXRHeader.channels;\r\n\t\t\tconst channelData = new Array( info.inputChannels.length );\r\n\r\n\t\t\tfor ( let i = 0; i < info.inputChannels.length; ++ i ) {\r\n\r\n\t\t\t\tconst cd = channelData[ i ] = {};\r\n\t\t\t\tconst channel = channels[ i ];\r\n\r\n\t\t\t\tcd.name = channel.name;\r\n\t\t\t\tcd.compression = UNKNOWN;\r\n\t\t\t\tcd.decoded = false;\r\n\t\t\t\tcd.type = channel.pixelType;\r\n\t\t\t\tcd.pLinear = channel.pLinear;\r\n\t\t\t\tcd.width = info.columns;\r\n\t\t\t\tcd.height = info.lines;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst cscSet = {\r\n\t\t\t\tidx: new Array( 3 )\r\n\t\t\t};\r\n\r\n\t\t\tfor ( let offset = 0; offset < info.inputChannels.length; ++ offset ) {\r\n\r\n\t\t\t\tconst cd = channelData[ offset ];\r\n\r\n\t\t\t\tfor ( let i = 0; i < channelRules.length; ++ i ) {\r\n\r\n\t\t\t\t\tconst rule = channelRules[ i ];\r\n\r\n\t\t\t\t\tif ( cd.name == rule.name ) {\r\n\r\n\t\t\t\t\t\tcd.compression = rule.compression;\r\n\r\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\r\n\r\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcd.offset = offset;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet acBuffer, dcBuffer, rleBuffer;\r\n\r\n\t\t\t// Read DCT - AC component data\r\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\r\n\r\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\r\n\r\n\t\t\t\t\tcase STATIC_HUFFMAN:\r\n\r\n\t\t\t\t\t\tacBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\r\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase DEFLATE:\r\n\r\n\t\t\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\r\n\t\t\t\t\t\tconst data = fflate.unzlibSync( compressed );\r\n\t\t\t\t\t\tacBuffer = new Uint16Array( data.buffer );\r\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read DCT - DC component data\r\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\r\n\r\n\t\t\t\tconst zlibInfo = {\r\n\t\t\t\t\tarray: info.array,\r\n\t\t\t\t\toffset: inOffset,\r\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\r\n\t\t\t\t};\r\n\t\t\t\tdcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\r\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Read RLE compressed data\r\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\r\n\r\n\t\t\t\tconst compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\r\n\t\t\t\tconst data = fflate.unzlibSync( compressed );\r\n\t\t\t\trleBuffer = decodeRunLength( data.buffer );\r\n\r\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Prepare outbuffer data offset\r\n\t\t\tlet outBufferEnd = 0;\r\n\t\t\tconst rowOffsets = new Array( channelData.length );\r\n\t\t\tfor ( let i = 0; i < rowOffsets.length; ++ i ) {\r\n\r\n\t\t\t\trowOffsets[ i ] = new Array();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\r\n\r\n\t\t\t\tfor ( let chan = 0; chan < channelData.length; ++ chan ) {\r\n\r\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\r\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Lossy DCT decode RGB channels\r\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\r\n\r\n\t\t\t// Decode other channels\r\n\t\t\tfor ( let i = 0; i < channelData.length; ++ i ) {\r\n\r\n\t\t\t\tconst cd = channelData[ i ];\r\n\r\n\t\t\t\tif ( cd.decoded ) continue;\r\n\r\n\t\t\t\tswitch ( cd.compression ) {\r\n\r\n\t\t\t\t\tcase RLE:\r\n\r\n\t\t\t\t\t\tlet row = 0;\r\n\t\t\t\t\t\tlet rleOffset = 0;\r\n\r\n\t\t\t\t\t\tfor ( let y = 0; y < info.lines; ++ y ) {\r\n\r\n\t\t\t\t\t\t\tlet rowOffsetBytes = rowOffsets[ i ][ row ];\r\n\r\n\t\t\t\t\t\t\tfor ( let x = 0; x < cd.width; ++ x ) {\r\n\r\n\t\t\t\t\t\t\t\tfor ( let byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\r\n\r\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\trleOffset ++;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\trow ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase LOSSY_DCT: // skip\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported channel compression' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new DataView( outBuffer.buffer );\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\r\n\r\n\t\t\tconst uintBuffer = new Uint8Array( buffer );\r\n\t\t\tlet endOffset = 0;\r\n\r\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\r\n\r\n\t\t\t\tendOffset += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst stringValue = new TextDecoder().decode(\r\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\r\n\t\t\t);\r\n\r\n\t\t\toffset.value = offset.value + endOffset + 1;\r\n\r\n\t\t\treturn stringValue;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\r\n\r\n\t\t\tconst stringValue = new TextDecoder().decode(\r\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\r\n\t\t\t);\r\n\r\n\t\t\toffset.value = offset.value + size;\r\n\r\n\t\t\treturn stringValue;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseRational( dataView, offset ) {\r\n\r\n\t\t\tconst x = parseInt32( dataView, offset );\r\n\t\t\tconst y = parseUint32( dataView, offset );\r\n\r\n\t\t\treturn [ x, y ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTimecode( dataView, offset ) {\r\n\r\n\t\t\tconst x = parseUint32( dataView, offset );\r\n\t\t\tconst y = parseUint32( dataView, offset );\r\n\r\n\t\t\treturn [ x, y ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseInt32( dataView, offset ) {\r\n\r\n\t\t\tconst Int32 = dataView.getInt32( offset.value, true );\r\n\r\n\t\t\toffset.value = offset.value + INT32_SIZE;\r\n\r\n\t\t\treturn Int32;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseUint32( dataView, offset ) {\r\n\r\n\t\t\tconst Uint32 = dataView.getUint32( offset.value, true );\r\n\r\n\t\t\toffset.value = offset.value + INT32_SIZE;\r\n\r\n\t\t\treturn Uint32;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\r\n\r\n\t\t\tconst Uint8 = uInt8Array[ offset.value ];\r\n\r\n\t\t\toffset.value = offset.value + INT8_SIZE;\r\n\r\n\t\t\treturn Uint8;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseUint8( dataView, offset ) {\r\n\r\n\t\t\tconst Uint8 = dataView.getUint8( offset.value );\r\n\r\n\t\t\toffset.value = offset.value + INT8_SIZE;\r\n\r\n\t\t\treturn Uint8;\r\n\r\n\t\t}\r\n\r\n\t\tconst parseInt64 = function ( dataView, offset ) {\r\n\r\n\t\t\tlet int;\r\n\r\n\t\t\tif ( 'getBigInt64' in DataView.prototype ) {\r\n\r\n\t\t\t\tint = Number( dataView.getBigInt64( offset.value, true ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tint = dataView.getUint32( offset.value + 4, true ) + Number( dataView.getUint32( offset.value, true ) << 32 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset.value += ULONG_SIZE;\r\n\r\n\t\t\treturn int;\r\n\r\n\t\t};\r\n\r\n\t\tfunction parseFloat32( dataView, offset ) {\r\n\r\n\t\t\tconst float = dataView.getFloat32( offset.value, true );\r\n\r\n\t\t\toffset.value += FLOAT32_SIZE;\r\n\r\n\t\t\treturn float;\r\n\r\n\t\t}\r\n\r\n\t\tfunction decodeFloat32( dataView, offset ) {\r\n\r\n\t\t\treturn DataUtils.toHalfFloat( parseFloat32( dataView, offset ) );\r\n\r\n\t\t}\r\n\r\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\r\n\t\tfunction decodeFloat16( binary ) {\r\n\r\n\t\t\tconst exponent = ( binary & 0x7C00 ) >> 10,\r\n\t\t\t\tfraction = binary & 0x03FF;\r\n\r\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\r\n\t\t\t\texponent ?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\texponent === 0x1F ?\r\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\r\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\r\n\t\t\t\t\t) :\r\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseUint16( dataView, offset ) {\r\n\r\n\t\t\tconst Uint16 = dataView.getUint16( offset.value, true );\r\n\r\n\t\t\toffset.value += INT16_SIZE;\r\n\r\n\t\t\treturn Uint16;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseFloat16( buffer, offset ) {\r\n\r\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\r\n\r\n\t\t\tconst startOffset = offset.value;\r\n\t\t\tconst channels = [];\r\n\r\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\r\n\r\n\t\t\t\tconst name = parseNullTerminatedString( buffer, offset );\r\n\t\t\t\tconst pixelType = parseInt32( dataView, offset );\r\n\t\t\t\tconst pLinear = parseUint8( dataView, offset );\r\n\t\t\t\toffset.value += 3; // reserved, three chars\r\n\t\t\t\tconst xSampling = parseInt32( dataView, offset );\r\n\t\t\t\tconst ySampling = parseInt32( dataView, offset );\r\n\r\n\t\t\t\tchannels.push( {\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\tpixelType: pixelType,\r\n\t\t\t\t\tpLinear: pLinear,\r\n\t\t\t\t\txSampling: xSampling,\r\n\t\t\t\t\tySampling: ySampling\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset.value += 1;\r\n\r\n\t\t\treturn channels;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseChromaticities( dataView, offset ) {\r\n\r\n\t\t\tconst redX = parseFloat32( dataView, offset );\r\n\t\t\tconst redY = parseFloat32( dataView, offset );\r\n\t\t\tconst greenX = parseFloat32( dataView, offset );\r\n\t\t\tconst greenY = parseFloat32( dataView, offset );\r\n\t\t\tconst blueX = parseFloat32( dataView, offset );\r\n\t\t\tconst blueY = parseFloat32( dataView, offset );\r\n\t\t\tconst whiteX = parseFloat32( dataView, offset );\r\n\t\t\tconst whiteY = parseFloat32( dataView, offset );\r\n\r\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseCompression( dataView, offset ) {\r\n\r\n\t\t\tconst compressionCodes = [\r\n\t\t\t\t'NO_COMPRESSION',\r\n\t\t\t\t'RLE_COMPRESSION',\r\n\t\t\t\t'ZIPS_COMPRESSION',\r\n\t\t\t\t'ZIP_COMPRESSION',\r\n\t\t\t\t'PIZ_COMPRESSION',\r\n\t\t\t\t'PXR24_COMPRESSION',\r\n\t\t\t\t'B44_COMPRESSION',\r\n\t\t\t\t'B44A_COMPRESSION',\r\n\t\t\t\t'DWAA_COMPRESSION',\r\n\t\t\t\t'DWAB_COMPRESSION'\r\n\t\t\t];\r\n\r\n\t\t\tconst compression = parseUint8( dataView, offset );\r\n\r\n\t\t\treturn compressionCodes[ compression ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBox2i( dataView, offset ) {\r\n\r\n\t\t\tconst xMin = parseInt32( dataView, offset );\r\n\t\t\tconst yMin = parseInt32( dataView, offset );\r\n\t\t\tconst xMax = parseInt32( dataView, offset );\r\n\t\t\tconst yMax = parseInt32( dataView, offset );\r\n\r\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseLineOrder( dataView, offset ) {\r\n\r\n\t\t\tconst lineOrders = [\r\n\t\t\t\t'INCREASING_Y',\r\n\t\t\t\t'DECREASING_Y',\r\n\t\t\t\t'RANDOM_Y',\r\n\t\t\t];\r\n\r\n\t\t\tconst lineOrder = parseUint8( dataView, offset );\r\n\r\n\t\t\treturn lineOrders[ lineOrder ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseEnvmap( dataView, offset ) {\r\n\r\n\t\t\tconst envmaps = [\r\n\t\t\t\t'ENVMAP_LATLONG',\r\n\t\t\t\t'ENVMAP_CUBE'\r\n\t\t\t];\r\n\r\n\t\t\tconst envmap = parseUint8( dataView, offset );\r\n\r\n\t\t\treturn envmaps[ envmap ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTiledesc( dataView, offset ) {\r\n\r\n\t\t\tconst levelModes = [\r\n\t\t\t\t'ONE_LEVEL',\r\n\t\t\t\t'MIPMAP_LEVELS',\r\n\t\t\t\t'RIPMAP_LEVELS',\r\n\t\t\t];\r\n\r\n\t\t\tconst roundingModes = [\r\n\t\t\t\t'ROUND_DOWN',\r\n\t\t\t\t'ROUND_UP',\r\n\t\t\t];\r\n\r\n\t\t\tconst xSize = parseUint32( dataView, offset );\r\n\t\t\tconst ySize = parseUint32( dataView, offset );\r\n\t\t\tconst modes = parseUint8( dataView, offset );\r\n\r\n\t\t\treturn {\r\n\t\t\t\txSize: xSize,\r\n\t\t\t\tySize: ySize,\r\n\t\t\t\tlevelMode: levelModes[ modes & 0xf ],\r\n\t\t\t\troundingMode: roundingModes[ modes >> 4 ]\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseV2f( dataView, offset ) {\r\n\r\n\t\t\tconst x = parseFloat32( dataView, offset );\r\n\t\t\tconst y = parseFloat32( dataView, offset );\r\n\r\n\t\t\treturn [ x, y ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseV3f( dataView, offset ) {\r\n\r\n\t\t\tconst x = parseFloat32( dataView, offset );\r\n\t\t\tconst y = parseFloat32( dataView, offset );\r\n\t\t\tconst z = parseFloat32( dataView, offset );\r\n\r\n\t\t\treturn [ x, y, z ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\r\n\r\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\r\n\r\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\r\n\r\n\t\t\t} else if ( type === 'chlist' ) {\r\n\r\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\r\n\r\n\t\t\t} else if ( type === 'chromaticities' ) {\r\n\r\n\t\t\t\treturn parseChromaticities( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'compression' ) {\r\n\r\n\t\t\t\treturn parseCompression( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'box2i' ) {\r\n\r\n\t\t\t\treturn parseBox2i( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'envmap' ) {\r\n\r\n\t\t\t\treturn parseEnvmap( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'tiledesc' ) {\r\n\r\n\t\t\t\treturn parseTiledesc( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'lineOrder' ) {\r\n\r\n\t\t\t\treturn parseLineOrder( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'float' ) {\r\n\r\n\t\t\t\treturn parseFloat32( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'v2f' ) {\r\n\r\n\t\t\t\treturn parseV2f( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'v3f' ) {\r\n\r\n\t\t\t\treturn parseV3f( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'int' ) {\r\n\r\n\t\t\t\treturn parseInt32( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'rational' ) {\r\n\r\n\t\t\t\treturn parseRational( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'timecode' ) {\r\n\r\n\t\t\t\treturn parseTimecode( dataView, offset );\r\n\r\n\t\t\t} else if ( type === 'preview' ) {\r\n\r\n\t\t\t\toffset.value += size;\r\n\t\t\t\treturn 'skipped';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toffset.value += size;\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction roundLog2( x, mode ) {\r\n\r\n\t\t\tconst log2 = Math.log2( x );\r\n\t\t\treturn mode == 'ROUND_DOWN' ? Math.floor( log2 ) : Math.ceil( log2 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction calculateTileLevels( tiledesc, w, h ) {\r\n\r\n\t\t\tlet num = 0;\r\n\r\n\t\t\tswitch ( tiledesc.levelMode ) {\r\n\r\n\t\t\t\tcase 'ONE_LEVEL':\r\n\t\t\t\t\tnum = 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'MIPMAP_LEVELS':\r\n\t\t\t\t\tnum = roundLog2( Math.max( w, h ), tiledesc.roundingMode ) + 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RIPMAP_LEVELS':\r\n\t\t\t\t\tthrow new Error( 'THREE.EXRLoader: RIPMAP_LEVELS tiles currently unsupported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn num;\r\n\r\n\t\t}\r\n\r\n\t\tfunction calculateTiles( count, dataSize, size, roundingMode ) {\r\n\r\n\t\t\tconst tiles = new Array( count );\r\n\r\n\t\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\tconst b = ( 1 << i );\r\n\t\t\t\tlet s = ( dataSize / b ) | 0;\r\n\r\n\t\t\t\tif ( roundingMode == 'ROUND_UP' && s * b < dataSize ) s += 1;\r\n\r\n\t\t\t\tconst l = Math.max( s, 1 );\r\n\r\n\t\t\t\ttiles[ i ] = ( ( l + size - 1 ) / size ) | 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn tiles;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTiles() {\r\n\r\n\t\t\tconst EXRDecoder = this;\r\n\t\t\tconst offset = EXRDecoder.offset;\r\n\t\t\tconst tmpOffset = { value: 0 };\r\n\r\n\t\t\tfor ( let tile = 0; tile < EXRDecoder.tileCount; tile ++ ) {\r\n\r\n\t\t\t\tconst tileX = parseInt32( EXRDecoder.viewer, offset );\r\n\t\t\t\tconst tileY = parseInt32( EXRDecoder.viewer, offset );\r\n\t\t\t\toffset.value += 8; // skip levels - only parsing top-level\r\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset );\r\n\r\n\t\t\t\tconst startX = tileX * EXRDecoder.blockWidth;\r\n\t\t\t\tconst startY = tileY * EXRDecoder.blockHeight;\r\n\t\t\t\tEXRDecoder.columns = ( startX + EXRDecoder.blockWidth > EXRDecoder.width ) ? EXRDecoder.width - startX : EXRDecoder.blockWidth;\r\n\t\t\t\tEXRDecoder.lines = ( startY + EXRDecoder.blockHeight > EXRDecoder.height ) ? EXRDecoder.height - startY : EXRDecoder.blockHeight;\r\n\r\n\t\t\t\tconst bytesBlockLine = EXRDecoder.columns * EXRDecoder.totalBytes;\r\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesBlockLine;\r\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\r\n\r\n\t\t\t\toffset.value += EXRDecoder.size;\r\n\r\n\t\t\t\tfor ( let line = 0; line < EXRDecoder.lines; line ++ ) {\r\n\r\n\t\t\t\t\tconst lineOffset = line * EXRDecoder.columns * EXRDecoder.totalBytes;\r\n\r\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\r\n\r\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\r\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\r\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\r\n\r\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\r\n\r\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\r\n\t\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - ( 1 + startY + line ) ) * EXRDecoder.outLineWidth;\r\n\r\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + ( x + startX ) * EXRDecoder.outputChannels + cOff;\r\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseScanline() {\r\n\r\n\t\t\tconst EXRDecoder = this;\r\n\t\t\tconst offset = EXRDecoder.offset;\r\n\t\t\tconst tmpOffset = { value: 0 };\r\n\r\n\t\t\tfor ( let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.blockHeight; scanlineBlockIdx ++ ) {\r\n\r\n\t\t\t\tconst line = parseInt32( EXRDecoder.viewer, offset ) - EXRHeader.dataWindow.yMin; // line_no\r\n\t\t\t\tEXRDecoder.size = parseUint32( EXRDecoder.viewer, offset ); // data_len\r\n\t\t\t\tEXRDecoder.lines = ( ( line + EXRDecoder.blockHeight > EXRDecoder.height ) ? ( EXRDecoder.height - line ) : EXRDecoder.blockHeight );\r\n\r\n\t\t\t\tconst bytesPerLine = EXRDecoder.columns * EXRDecoder.totalBytes;\r\n\t\t\t\tconst isCompressed = EXRDecoder.size < EXRDecoder.lines * bytesPerLine;\r\n\t\t\t\tconst viewer = isCompressed ? EXRDecoder.uncompress( EXRDecoder ) : uncompressRAW( EXRDecoder );\r\n\r\n\t\t\t\toffset.value += EXRDecoder.size;\r\n\r\n\t\t\t\tfor ( let line_y = 0; line_y < EXRDecoder.blockHeight; line_y ++ ) {\r\n\r\n\t\t\t\t\tconst scan_y = scanlineBlockIdx * EXRDecoder.blockHeight;\r\n\t\t\t\t\tconst true_y = line_y + EXRDecoder.scanOrder( scan_y );\r\n\t\t\t\t\tif ( true_y >= EXRDecoder.height ) continue;\r\n\r\n\t\t\t\t\tconst lineOffset = line_y * bytesPerLine;\r\n\t\t\t\t\tconst outLineOffset = ( EXRDecoder.height - 1 - true_y ) * EXRDecoder.outLineWidth;\r\n\r\n\t\t\t\t\tfor ( let channelID = 0; channelID < EXRDecoder.inputChannels.length; channelID ++ ) {\r\n\r\n\t\t\t\t\t\tconst name = EXRHeader.channels[ channelID ].name;\r\n\t\t\t\t\t\tconst lOff = EXRDecoder.channelByteOffsets[ name ] * EXRDecoder.columns;\r\n\t\t\t\t\t\tconst cOff = EXRDecoder.decodeChannels[ name ];\r\n\r\n\t\t\t\t\t\tif ( cOff === undefined ) continue;\r\n\r\n\t\t\t\t\t\ttmpOffset.value = lineOffset + lOff;\r\n\r\n\t\t\t\t\t\tfor ( let x = 0; x < EXRDecoder.columns; x ++ ) {\r\n\r\n\t\t\t\t\t\t\tconst outIndex = outLineOffset + x * EXRDecoder.outputChannels + cOff;\r\n\t\t\t\t\t\t\tEXRDecoder.byteArray[ outIndex ] = EXRDecoder.getter( viewer, tmpOffset );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseHeader( dataView, buffer, offset ) {\r\n\r\n\t\t\tconst EXRHeader = {};\r\n\r\n\t\t\tif ( dataView.getUint32( 0, true ) != 20000630 ) { // magic\r\n\r\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file doesn\\'t appear to be in OpenEXR format.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tEXRHeader.version = dataView.getUint8( 4 );\r\n\r\n\t\t\tconst spec = dataView.getUint8( 5 ); // fullMask\r\n\r\n\t\t\tEXRHeader.spec = {\r\n\t\t\t\tsingleTile: !! ( spec & 2 ),\r\n\t\t\t\tlongName: !! ( spec & 4 ),\r\n\t\t\t\tdeepFormat: !! ( spec & 8 ),\r\n\t\t\t\tmultiPart: !! ( spec & 16 ),\r\n\t\t\t};\r\n\r\n\t\t\t// start of header\r\n\r\n\t\t\toffset.value = 8; // start at 8 - after pre-amble\r\n\r\n\t\t\tlet keepReading = true;\r\n\r\n\t\t\twhile ( keepReading ) {\r\n\r\n\t\t\t\tconst attributeName = parseNullTerminatedString( buffer, offset );\r\n\r\n\t\t\t\tif ( attributeName == 0 ) {\r\n\r\n\t\t\t\t\tkeepReading = false;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst attributeType = parseNullTerminatedString( buffer, offset );\r\n\t\t\t\t\tconst attributeSize = parseUint32( dataView, offset );\r\n\t\t\t\t\tconst attributeValue = parseValue( dataView, buffer, offset, attributeType, attributeSize );\r\n\r\n\t\t\t\t\tif ( attributeValue === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( `THREE.EXRLoader: Skipped unknown header attribute type \\'${attributeType}\\'.` );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( spec & ~ 0x06 ) != 0 ) { // unsupported deep-image, multi-part\r\n\r\n\t\t\t\tconsole.error( 'THREE.EXRHeader:', EXRHeader );\r\n\t\t\t\tthrow new Error( 'THREE.EXRLoader: Provided file is currently unsupported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn EXRHeader;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setupDecoder( EXRHeader, dataView, uInt8Array, offset, outputType ) {\r\n\r\n\t\t\tconst EXRDecoder = {\r\n\t\t\t\tsize: 0,\r\n\t\t\t\tviewer: dataView,\r\n\t\t\t\tarray: uInt8Array,\r\n\t\t\t\toffset: offset,\r\n\t\t\t\twidth: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\r\n\t\t\t\theight: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\r\n\t\t\t\tinputChannels: EXRHeader.channels,\r\n\t\t\t\tchannelByteOffsets: {},\r\n\t\t\t\tscanOrder: null,\r\n\t\t\t\ttotalBytes: null,\r\n\t\t\t\tcolumns: null,\r\n\t\t\t\tlines: null,\r\n\t\t\t\ttype: null,\r\n\t\t\t\tuncompress: null,\r\n\t\t\t\tgetter: null,\r\n\t\t\t\tformat: null,\r\n\t\t\t\tcolorSpace: LinearSRGBColorSpace,\r\n\t\t\t};\r\n\r\n\t\t\tswitch ( EXRHeader.compression ) {\r\n\r\n\t\t\t\tcase 'NO_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRAW;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RLE_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressRLE;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ZIPS_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 1;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ZIP_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressZIP;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PIZ_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPIZ;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PXR24_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 16;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressPXR;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DWAA_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 32;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DWAB_COMPRESSION':\r\n\t\t\t\t\tEXRDecoder.blockHeight = 256;\r\n\t\t\t\t\tEXRDecoder.uncompress = uncompressDWA;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error( 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst channels = {};\r\n\t\t\tfor ( const channel of EXRHeader.channels ) {\r\n\r\n\t\t\t\tswitch ( channel.name ) {\r\n\r\n\t\t\t\t\tcase 'Y':\r\n\t\t\t\t\tcase 'R':\r\n\t\t\t\t\tcase 'G':\r\n\t\t\t\t\tcase 'B':\r\n\t\t\t\t\tcase 'A':\r\n\t\t\t\t\t\tchannels[ channel.name ] = true;\r\n\t\t\t\t\t\tEXRDecoder.type = channel.pixelType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// RGB images will be converted to RGBA format, preventing software emulation in select devices.\r\n\t\t\tlet fillAlpha = false;\r\n\r\n\t\t\tif ( channels.R && channels.G && channels.B ) {\r\n\r\n\t\t\t\tfillAlpha = ! channels.A;\r\n\t\t\t\tEXRDecoder.outputChannels = 4;\r\n\t\t\t\tEXRDecoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\r\n\r\n\t\t\t} else if ( channels.Y ) {\r\n\r\n\t\t\t\tEXRDecoder.outputChannels = 1;\r\n\t\t\t\tEXRDecoder.decodeChannels = { Y: 0 };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'EXRLoader.parse: file contains unsupported data channels.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( EXRDecoder.type == 1 ) {\r\n\r\n\t\t\t\t// half\r\n\t\t\t\tswitch ( outputType ) {\r\n\r\n\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat16;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\t\tEXRDecoder.getter = parseUint16;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( EXRDecoder.type == 2 ) {\r\n\r\n\t\t\t\t// float\r\n\t\t\t\tswitch ( outputType ) {\r\n\r\n\t\t\t\t\tcase FloatType:\r\n\t\t\t\t\t\tEXRDecoder.getter = parseFloat32;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\t\tEXRDecoder.getter = decodeFloat32;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tEXRDecoder.columns = EXRDecoder.width;\r\n\t\t\tconst size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\r\n\r\n\t\t\tswitch ( outputType ) {\r\n\r\n\t\t\t\tcase FloatType:\r\n\t\t\t\t\tEXRDecoder.byteArray = new Float32Array( size );\r\n\r\n\t\t\t\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\r\n\t\t\t\t\tif ( fillAlpha )\r\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 1, 0, size );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase HalfFloatType:\r\n\t\t\t\t\tEXRDecoder.byteArray = new Uint16Array( size );\r\n\r\n\t\t\t\t\tif ( fillAlpha )\r\n\t\t\t\t\t\tEXRDecoder.byteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', outputType );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet byteOffset = 0;\r\n\t\t\tfor ( const channel of EXRHeader.channels ) {\r\n\r\n\t\t\t\tif ( EXRDecoder.decodeChannels[ channel.name ] !== undefined ) {\r\n\r\n\t\t\t\t\tEXRDecoder.channelByteOffsets[ channel.name ] = byteOffset;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbyteOffset += channel.pixelType * 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tEXRDecoder.totalBytes = byteOffset;\r\n\t\t\tEXRDecoder.outLineWidth = EXRDecoder.width * EXRDecoder.outputChannels;\r\n\r\n\t\t\tif ( EXRHeader.lineOrder === 'INCREASING_Y' ) {\r\n\r\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tEXRDecoder.scanOrder = ( y ) => EXRDecoder.height - 1 - y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( EXRDecoder.outputChannels == 4 ) {\r\n\r\n\t\t\t\tEXRDecoder.format = RGBAFormat;\r\n\t\t\t\tEXRDecoder.colorSpace = LinearSRGBColorSpace;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tEXRDecoder.format = RedFormat;\r\n\t\t\t\tEXRDecoder.colorSpace = NoColorSpace;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( EXRHeader.spec.singleTile ) {\r\n\r\n\t\t\t\tEXRDecoder.blockHeight = EXRHeader.tiles.ySize;\r\n\t\t\t\tEXRDecoder.blockWidth = EXRHeader.tiles.xSize;\r\n\r\n\t\t\t\tconst numXLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\r\n\t\t\t\t// const numYLevels = calculateTileLevels( EXRHeader.tiles, EXRDecoder.width, EXRDecoder.height );\r\n\r\n\t\t\t\tconst numXTiles = calculateTiles( numXLevels, EXRDecoder.width, EXRHeader.tiles.xSize, EXRHeader.tiles.roundingMode );\r\n\t\t\t\tconst numYTiles = calculateTiles( numXLevels, EXRDecoder.height, EXRHeader.tiles.ySize, EXRHeader.tiles.roundingMode );\r\n\r\n\t\t\t\tEXRDecoder.tileCount = numXTiles[ 0 ] * numYTiles[ 0 ];\r\n\r\n\t\t\t\tfor ( let l = 0; l < numXLevels; l ++ )\r\n\t\t\t\t\tfor ( let y = 0; y < numYTiles[ l ]; y ++ )\r\n\t\t\t\t\t\tfor ( let x = 0; x < numXTiles[ l ]; x ++ )\r\n\t\t\t\t\t\t\tparseInt64( dataView, offset ); // tileOffset\r\n\r\n\t\t\t\tEXRDecoder.decode = parseTiles.bind( EXRDecoder );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tEXRDecoder.blockWidth = EXRDecoder.width;\r\n\t\t\t\tconst blockCount = Math.ceil( EXRDecoder.height / EXRDecoder.blockHeight );\r\n\r\n\t\t\t\tfor ( let i = 0; i < blockCount; i ++ )\r\n\t\t\t\t\tparseInt64( dataView, offset ); // scanlineOffset\r\n\r\n\t\t\t\tEXRDecoder.decode = parseScanline.bind( EXRDecoder );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn EXRDecoder;\r\n\r\n\t\t}\r\n\r\n\t\t// start parsing file [START]\r\n\t\tconst offset = { value: 0 };\r\n\t\tconst bufferDataView = new DataView( buffer );\r\n\t\tconst uInt8Array = new Uint8Array( buffer );\r\n\r\n\t\t// get header information and validate format.\r\n\t\tconst EXRHeader = parseHeader( bufferDataView, buffer, offset );\r\n\r\n\t\t// get input compression information and prepare decoding.\r\n\t\tconst EXRDecoder = setupDecoder( EXRHeader, bufferDataView, uInt8Array, offset, this.type );\r\n\r\n\t\t// parse input data\r\n\t\tEXRDecoder.decode();\r\n\r\n\t\treturn {\r\n\t\t\theader: EXRHeader,\r\n\t\t\twidth: EXRDecoder.width,\r\n\t\t\theight: EXRDecoder.height,\r\n\t\t\tdata: EXRDecoder.byteArray,\r\n\t\t\tformat: EXRDecoder.format,\r\n\t\t\tcolorSpace: EXRDecoder.colorSpace,\r\n\t\t\ttype: this.type,\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tsetDataType( value ) {\r\n\r\n\t\tthis.type = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tfunction onLoadCallback( texture, texData ) {\r\n\r\n\t\t\ttexture.colorSpace = texData.colorSpace;\r\n\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\ttexture.generateMipmaps = false;\r\n\t\t\ttexture.flipY = false;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}\r\n\r\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EXRLoader };\r\n"],
  "mappings": "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AI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,CAAE,CAAE;AACpC,UAAK,EAAG,IAAI,cAAe,IAAK,CAAE,CAAE;AACpC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AAErC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,CAAE,CAAE;AACpC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AAErC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AACrC,UAAK,EAAG,IAAI,cAAe,IAAK,EAAG,CAAE;AAErC,UAAK,EAAG,IAAI,cAAe,IAA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",
  "names": ["err", "l", "_a", "_b", "i", "td", "err", "fl", "Deflate", "AsyncDeflate", "Inflate", "AsyncInflate", "Gzip", "Gunzip", "AsyncGunzip", "Zlib", "Unzlib", "AsyncUnzlib", "Decompress", "AsyncDecompress", "err", "DecodeUTF8", "_a", "EncodeUTF8", "_a", "fl", "ZipPassThrough", "ZipDeflate", "AsyncZipDeflate", "err", "Zip", "err", "_a", "_b", "UnzipPassThrough", "UnzipInflate", "AsyncUnzipInflate", "err", "Unzip", "_a", "err", "dat", "final", "lc", "uInt8Array", "buffer", "offset", "EXRDecoder", "EXRHeader"]
}
